# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ScheduleCount {
  CounselorSession: Int!
}

type Schedule {
  id: ID!
  days: DateTime!
  timeFrom: DateTime!
  timeTo: DateTime!
  hour: DateTime!
  CounselorSession: [CounselorSession!]
  Counselor: Counselor
  counselorId: String
  _count: ScheduleCount!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CounselorCount {
  Schedule: Int!
  CounselorSession: Int!
}

type Counselor {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  department: String
  user: User!
  expertise: String
  Schedule: [Schedule!]
  createdAt: DateTime!
  updatedAt: DateTime!
  CounselorSession: [CounselorSession!]
  _count: CounselorCount!
}

type StaffCount {
  CounselorSession: Int!
}

type Staff {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  staffId: String!
  user: User!
  faculty: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  CounselorSession: [CounselorSession!]
  _count: StaffCount!
}

type CounselorSession {
  id: ID!
  counsellingReason: String
  counselor: Counselor!
  student: Student
  staff: Staff
  user: User
  counselorSchedule: Schedule!
  scheduleId: String!
  counselorId: String!
  userId: String
  studentId: String
  staffId: String
  counsellingDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StudentCount {
  CounselorSession: Int!
}

type Student {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  matrix: String
  user: User!
  faculty: String
  createdAt: DateTime!
  updatedAt: DateTime!
  CounselorSession: [CounselorSession!]
  _count: StudentCount!
}

type Admin {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Post {
  id: ID!
  title: String!
  body: String!
  userId: String!
  author: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserCount {
  posts: Int!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  password: String!
  mobile: String
  gender: Gender
  accountStatus: AccountStatus!
  role: Role!
  student: Student
  staff: Staff
  counselor: Counselor
  admin: Admin
  posts: [Post!]
  counselingSession: CounselorSession
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: UserCount!
}

enum Gender {
  M
  F
  OTHERS
}

enum AccountStatus {
  VERIFIED
  UNVERIFIED
  APPROVED
  REJECTED
}

enum Role {
  ADMIN
  USER
  STUDENT
  COUNSELOR
  STAFF
}

type Message {
  id: ID!
  sender: String!
  reciever: String!
  Message: String!
}

type Chat {
  id: ID!
  chatStatus: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Event {
  id: ID!
  title: String!
  eventImageURL: String
  eventDetails: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FAQ {
  id: ID!
  title: String!
  answer: String!
  icon: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Auth {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
  user: User!
}

type Query {
  findAllUsers(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]!
  findAllCounselors(where: CounselorWhereInput, orderBy: [CounselorOrderByWithRelationInput!], cursor: CounselorWhereUniqueInput, take: Int, skip: Int, distinct: [CounselorScalarFieldEnum!]): [Counselor!]!
  me: User!
  findAllPosts(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput!], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum!]): Post!
  findAllMessages(where: MessageWhereInput, orderBy: [MessageOrderByWithRelationInput!], cursor: MessageWhereUniqueInput, take: Int, skip: Int, distinct: [MessageScalarFieldEnum!]): Message!
  findAllChats(where: ChatWhereInput, orderBy: [ChatOrderByWithRelationInput!], cursor: ChatWhereUniqueInput, take: Int, skip: Int, distinct: [ChatScalarFieldEnum!]): Chat!
  findAllEvents(where: EventWhereInput, orderBy: [EventOrderByWithRelationInput!], cursor: EventWhereUniqueInput, take: Int, skip: Int, distinct: [EventScalarFieldEnum!]): [Event!]!
  findAllFaqs(where: FAQWhereInput, orderBy: [FAQOrderByWithRelationInput!], cursor: FAQWhereUniqueInput, take: Int, skip: Int, distinct: [FAQScalarFieldEnum!]): [FAQ!]!
  findAllSchedules(where: ScheduleWhereInput, orderBy: [ScheduleOrderByWithRelationInput!], cursor: ScheduleWhereUniqueInput, take: Int, skip: Int, distinct: [ScheduleScalarFieldEnum!]): Schedule!
  findAllCounselorSessions(where: CounselorSessionWhereInput, orderBy: [CounselorSessionOrderByWithRelationInput!], cursor: CounselorSessionWhereUniqueInput, take: Int, skip: Int, distinct: [CounselorSessionScalarFieldEnum!]): [CounselorSession!]!
  currentUser: User!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  password: StringFilter
  mobile: StringNullableFilter
  gender: EnumGenderNullableFilter
  accountStatus: EnumAccountStatusFilter
  role: EnumRoleFilter
  student: StudentRelationFilter
  staff: StaffRelationFilter
  counselor: CounselorRelationFilter
  admin: AdminRelationFilter
  posts: PostListRelationFilter
  counselingSession: CounselorSessionRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input EnumGenderNullableFilter {
  equals: Gender
  in: [Gender!]
  notIn: [Gender!]
  not: NestedEnumGenderNullableFilter
}

input NestedEnumGenderNullableFilter {
  equals: Gender
  in: [Gender!]
  notIn: [Gender!]
  not: NestedEnumGenderNullableFilter
}

input EnumAccountStatusFilter {
  equals: AccountStatus
  in: [AccountStatus!]
  notIn: [AccountStatus!]
  not: NestedEnumAccountStatusFilter
}

input NestedEnumAccountStatusFilter {
  equals: AccountStatus
  in: [AccountStatus!]
  notIn: [AccountStatus!]
  not: NestedEnumAccountStatusFilter
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleFilter
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleFilter
}

input StudentRelationFilter {
  is: StudentWhereInput
  isNot: StudentWhereInput
}

input StudentWhereInput {
  AND: [StudentWhereInput!]
  OR: [StudentWhereInput!]
  NOT: [StudentWhereInput!]
  id: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  matrix: StringNullableFilter
  user: UserRelationFilter
  faculty: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  CounselorSession: CounselorSessionListRelationFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input CounselorSessionListRelationFilter {
  every: CounselorSessionWhereInput
  some: CounselorSessionWhereInput
  none: CounselorSessionWhereInput
}

input CounselorSessionWhereInput {
  AND: [CounselorSessionWhereInput!]
  OR: [CounselorSessionWhereInput!]
  NOT: [CounselorSessionWhereInput!]
  id: StringFilter
  counsellingReason: StringNullableFilter
  counselor: CounselorRelationFilter
  student: StudentRelationFilter
  staff: StaffRelationFilter
  user: UserRelationFilter
  counselorSchedule: ScheduleRelationFilter
  scheduleId: StringFilter
  counselorId: StringFilter
  userId: StringNullableFilter
  studentId: StringNullableFilter
  staffId: StringNullableFilter
  counsellingDate: DateTimeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CounselorRelationFilter {
  is: CounselorWhereInput
  isNot: CounselorWhereInput
}

input CounselorWhereInput {
  AND: [CounselorWhereInput!]
  OR: [CounselorWhereInput!]
  NOT: [CounselorWhereInput!]
  id: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  department: StringNullableFilter
  user: UserRelationFilter
  expertise: StringNullableFilter
  Schedule: ScheduleListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  CounselorSession: CounselorSessionListRelationFilter
}

input ScheduleListRelationFilter {
  every: ScheduleWhereInput
  some: ScheduleWhereInput
  none: ScheduleWhereInput
}

input ScheduleWhereInput {
  AND: [ScheduleWhereInput!]
  OR: [ScheduleWhereInput!]
  NOT: [ScheduleWhereInput!]
  id: StringFilter
  days: DateTimeFilter
  timeFrom: DateTimeFilter
  timeTo: DateTimeFilter
  hour: DateTimeFilter
  CounselorSession: CounselorSessionListRelationFilter
  Counselor: CounselorRelationFilter
  counselorId: StringNullableFilter
}

input StaffRelationFilter {
  is: StaffWhereInput
  isNot: StaffWhereInput
}

input StaffWhereInput {
  AND: [StaffWhereInput!]
  OR: [StaffWhereInput!]
  NOT: [StaffWhereInput!]
  id: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  staffId: StringFilter
  user: UserRelationFilter
  faculty: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  CounselorSession: CounselorSessionListRelationFilter
}

input ScheduleRelationFilter {
  is: ScheduleWhereInput
  isNot: ScheduleWhereInput
}

input AdminRelationFilter {
  is: AdminWhereInput
  isNot: AdminWhereInput
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  id: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  user: UserRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PostListRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: StringFilter
  title: StringFilter
  body: StringFilter
  userId: StringFilter
  author: UserRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CounselorSessionRelationFilter {
  is: CounselorSessionWhereInput
  isNot: CounselorSessionWhereInput
}

input UserOrderByWithRelationInput {
  id: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  password: SortOrder
  mobile: SortOrder
  gender: SortOrder
  accountStatus: SortOrder
  role: SortOrder
  student: StudentOrderByWithRelationInput
  staff: StaffOrderByWithRelationInput
  counselor: CounselorOrderByWithRelationInput
  admin: AdminOrderByWithRelationInput
  posts: PostOrderByRelationAggregateInput
  counselingSession: CounselorSessionOrderByWithRelationInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum SortOrder {
  asc
  desc
}

input StudentOrderByWithRelationInput {
  id: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  email: SortOrder
  matrix: SortOrder
  user: UserOrderByWithRelationInput
  faculty: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  CounselorSession: CounselorSessionOrderByRelationAggregateInput
}

input CounselorSessionOrderByRelationAggregateInput {
  _count: SortOrder
}

input StaffOrderByWithRelationInput {
  id: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  email: SortOrder
  staffId: SortOrder
  user: UserOrderByWithRelationInput
  faculty: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  CounselorSession: CounselorSessionOrderByRelationAggregateInput
}

input CounselorOrderByWithRelationInput {
  id: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  email: SortOrder
  department: SortOrder
  user: UserOrderByWithRelationInput
  expertise: SortOrder
  Schedule: ScheduleOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
  CounselorSession: CounselorSessionOrderByRelationAggregateInput
}

input ScheduleOrderByRelationAggregateInput {
  _count: SortOrder
}

input AdminOrderByWithRelationInput {
  id: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  email: SortOrder
  user: UserOrderByWithRelationInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input CounselorSessionOrderByWithRelationInput {
  id: SortOrder
  counsellingReason: SortOrder
  counselor: CounselorOrderByWithRelationInput
  student: StudentOrderByWithRelationInput
  staff: StaffOrderByWithRelationInput
  user: UserOrderByWithRelationInput
  counselorSchedule: ScheduleOrderByWithRelationInput
  scheduleId: SortOrder
  counselorId: SortOrder
  userId: SortOrder
  studentId: SortOrder
  staffId: SortOrder
  counsellingDate: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ScheduleOrderByWithRelationInput {
  id: SortOrder
  days: SortOrder
  timeFrom: SortOrder
  timeTo: SortOrder
  hour: SortOrder
  CounselorSession: CounselorSessionOrderByRelationAggregateInput
  Counselor: CounselorOrderByWithRelationInput
  counselorId: SortOrder
}

input UserWhereUniqueInput {
  id: String
  mobile: String
}

enum UserScalarFieldEnum {
  id
  firstName
  lastName
  password
  mobile
  gender
  accountStatus
  role
  createdAt
  updatedAt
}

input CounselorWhereUniqueInput {
  id: String
  email: String
}

enum CounselorScalarFieldEnum {
  id
  firstName
  lastName
  email
  department
  expertise
  createdAt
  updatedAt
}

input PostOrderByWithRelationInput {
  id: SortOrder
  title: SortOrder
  body: SortOrder
  userId: SortOrder
  author: UserOrderByWithRelationInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PostWhereUniqueInput {
  id: String
}

enum PostScalarFieldEnum {
  id
  title
  body
  userId
  createdAt
  updatedAt
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
  id: StringFilter
  sender: StringFilter
  reciever: StringFilter
  Message: StringFilter
}

input MessageOrderByWithRelationInput {
  id: SortOrder
  sender: SortOrder
  reciever: SortOrder
  Message: SortOrder
}

input MessageWhereUniqueInput {
  id: String
}

enum MessageScalarFieldEnum {
  id
  sender
  reciever
  Message
}

input ChatWhereInput {
  AND: [ChatWhereInput!]
  OR: [ChatWhereInput!]
  NOT: [ChatWhereInput!]
  id: StringFilter
  chatStatus: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ChatOrderByWithRelationInput {
  id: SortOrder
  chatStatus: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ChatWhereUniqueInput {
  id: String
}

enum ChatScalarFieldEnum {
  id
  chatStatus
  createdAt
  updatedAt
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: StringFilter
  title: StringFilter
  eventImageURL: StringNullableFilter
  eventDetails: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input EventOrderByWithRelationInput {
  id: SortOrder
  title: SortOrder
  eventImageURL: SortOrder
  eventDetails: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input EventWhereUniqueInput {
  id: String
}

enum EventScalarFieldEnum {
  id
  title
  eventImageURL
  eventDetails
  createdAt
  updatedAt
}

input FAQWhereInput {
  AND: [FAQWhereInput!]
  OR: [FAQWhereInput!]
  NOT: [FAQWhereInput!]
  id: StringFilter
  title: StringFilter
  answer: StringFilter
  icon: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input FAQOrderByWithRelationInput {
  id: SortOrder
  title: SortOrder
  answer: SortOrder
  icon: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input FAQWhereUniqueInput {
  id: String
}

enum FAQScalarFieldEnum {
  id
  title
  answer
  icon
  createdAt
  updatedAt
}

input ScheduleWhereUniqueInput {
  id: String
}

enum ScheduleScalarFieldEnum {
  id
  days
  timeFrom
  timeTo
  hour
  counselorId
}

input CounselorSessionWhereUniqueInput {
  id: String
  userId: String
}

enum CounselorSessionScalarFieldEnum {
  id
  counsellingReason
  scheduleId
  counselorId
  userId
  studentId
  staffId
  counsellingDate
  createdAt
  updatedAt
}

type Mutation {
  findOneUser(where: UserWhereUniqueInput!): User!
  approveUser(id: String!): User!
  rejectUser(id: String!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User!
  findOnePost(where: PostWhereUniqueInput!): Post!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post!
  findOneMessage(where: MessageWhereUniqueInput!): Message!
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message!
  findOneChat(where: ChatWhereUniqueInput!): Chat!
  createChat(data: ChatCreateInput!): Chat!
  updateChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat!
  deleteChat(where: ChatWhereUniqueInput!): Chat!
  findOneEvent(where: EventWhereUniqueInput!): Event!
  createEvent(data: EventCreateInput!): Event!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event!
  deleteEvent(where: EventWhereUniqueInput!): Event!
  findOneFaq(where: FAQWhereUniqueInput!): FAQ!
  createFaq(data: FAQCreateInput!): FAQ!
  updateFaq(data: FAQUpdateInput!, where: FAQWhereUniqueInput!): FAQ!
  deleteFaq(where: FAQWhereUniqueInput!): FAQ!
  findOneSchedule(where: ScheduleWhereUniqueInput!): Schedule!
  createSchedule(data: ScheduleCreateInput!): Schedule!
  updateSchedule(data: ScheduleUpdateInput!, where: ScheduleWhereUniqueInput!): Schedule!
  deleteSchedule(where: ScheduleWhereUniqueInput!): Schedule!
  findOneCounselorSession(where: CounselorSessionWhereUniqueInput!): CounselorSession!
  createCounselorSession(data: CounselorSessionCreateInput!): CounselorSession!
  updateCounselorSession(data: CounselorSessionUpdateInput!, where: CounselorSessionWhereUniqueInput!): CounselorSession!
  deleteCounselorSession(where: CounselorSessionWhereUniqueInput!): CounselorSession!
  login(data: LoginInput!): Auth!
  signup(data: SignupInput!): Auth!
}

input UserUpdateInput {
  id: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  mobile: NullableStringFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  accountStatus: EnumAccountStatusFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  student: StudentUpdateOneWithoutUserInput
  staff: StaffUpdateOneWithoutUserInput
  counselor: CounselorUpdateOneWithoutUserInput
  admin: AdminUpdateOneWithoutUserInput
  posts: PostUpdateManyWithoutAuthorInput
  counselingSession: CounselorSessionUpdateOneWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input NullableEnumGenderFieldUpdateOperationsInput {
  set: Gender
}

input EnumAccountStatusFieldUpdateOperationsInput {
  set: AccountStatus
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input StudentUpdateOneWithoutUserInput {
  create: StudentCreateWithoutUserInput
  connectOrCreate: StudentCreateOrConnectWithoutUserInput
  upsert: StudentUpsertWithoutUserInput
  disconnect: Boolean
  delete: Boolean
  connect: StudentWhereUniqueInput
  update: StudentUpdateWithoutUserInput
}

input StudentCreateWithoutUserInput {
  firstName: String!
  lastName: String!
  email: String!
  matrix: String
  faculty: String
  createdAt: DateTime
  updatedAt: DateTime
  CounselorSession: CounselorSessionCreateNestedManyWithoutStudentInput
}

input CounselorSessionCreateNestedManyWithoutStudentInput {
  create: [CounselorSessionCreateWithoutStudentInput!]
  connectOrCreate: [CounselorSessionCreateOrConnectWithoutStudentInput!]
  createMany: CounselorSessionCreateManyStudentInputEnvelope
  connect: [CounselorSessionWhereUniqueInput!]
}

input CounselorSessionCreateWithoutStudentInput {
  id: String
  counsellingReason: String
  counselor: CounselorCreateNestedOneWithoutCounselorSessionInput!
  staff: StaffCreateNestedOneWithoutCounselorSessionInput
  user: UserCreateNestedOneWithoutCounselingSessionInput
  counselorSchedule: ScheduleCreateNestedOneWithoutCounselorSessionInput!
  counsellingDate: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
}

input CounselorCreateNestedOneWithoutCounselorSessionInput {
  create: CounselorCreateWithoutCounselorSessionInput
  connectOrCreate: CounselorCreateOrConnectWithoutCounselorSessionInput
  connect: CounselorWhereUniqueInput
}

input CounselorCreateWithoutCounselorSessionInput {
  firstName: String!
  lastName: String!
  email: String!
  department: String
  user: UserCreateNestedOneWithoutCounselorInput
  expertise: String
  Schedule: ScheduleCreateNestedManyWithoutCounselorInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutCounselorInput {
  create: UserCreateWithoutCounselorInput
  connectOrCreate: UserCreateOrConnectWithoutCounselorInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCounselorInput {
  id: String
  firstName: String!
  lastName: String!
  password: String!
  mobile: String
  gender: Gender
  accountStatus: AccountStatus
  role: Role!
  student: StudentCreateNestedOneWithoutUserInput
  staff: StaffCreateNestedOneWithoutUserInput
  admin: AdminCreateNestedOneWithoutUserInput
  posts: PostCreateNestedManyWithoutAuthorInput
  counselingSession: CounselorSessionCreateNestedOneWithoutUserInput
  createdAt: DateTime
  updatedAt: DateTime
}

input StudentCreateNestedOneWithoutUserInput {
  create: StudentCreateWithoutUserInput
  connectOrCreate: StudentCreateOrConnectWithoutUserInput
  connect: StudentWhereUniqueInput
}

input StudentCreateOrConnectWithoutUserInput {
  where: StudentWhereUniqueInput!
  create: StudentCreateWithoutUserInput!
}

input StudentWhereUniqueInput {
  id: String
  email: String
  matrix: String
}

input StaffCreateNestedOneWithoutUserInput {
  create: StaffCreateWithoutUserInput
  connectOrCreate: StaffCreateOrConnectWithoutUserInput
  connect: StaffWhereUniqueInput
}

input StaffCreateWithoutUserInput {
  firstName: String!
  lastName: String!
  email: String!
  staffId: String!
  faculty: String!
  createdAt: DateTime
  updatedAt: DateTime
  CounselorSession: CounselorSessionCreateNestedManyWithoutStaffInput
}

input CounselorSessionCreateNestedManyWithoutStaffInput {
  create: [CounselorSessionCreateWithoutStaffInput!]
  connectOrCreate: [CounselorSessionCreateOrConnectWithoutStaffInput!]
  createMany: CounselorSessionCreateManyStaffInputEnvelope
  connect: [CounselorSessionWhereUniqueInput!]
}

input CounselorSessionCreateWithoutStaffInput {
  id: String
  counsellingReason: String
  counselor: CounselorCreateNestedOneWithoutCounselorSessionInput!
  student: StudentCreateNestedOneWithoutCounselorSessionInput
  user: UserCreateNestedOneWithoutCounselingSessionInput
  counselorSchedule: ScheduleCreateNestedOneWithoutCounselorSessionInput!
  counsellingDate: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
}

input StudentCreateNestedOneWithoutCounselorSessionInput {
  create: StudentCreateWithoutCounselorSessionInput
  connectOrCreate: StudentCreateOrConnectWithoutCounselorSessionInput
  connect: StudentWhereUniqueInput
}

input StudentCreateWithoutCounselorSessionInput {
  firstName: String!
  lastName: String!
  email: String!
  matrix: String
  user: UserCreateNestedOneWithoutStudentInput
  faculty: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutStudentInput {
  create: UserCreateWithoutStudentInput
  connectOrCreate: UserCreateOrConnectWithoutStudentInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutStudentInput {
  id: String
  firstName: String!
  lastName: String!
  password: String!
  mobile: String
  gender: Gender
  accountStatus: AccountStatus
  role: Role!
  staff: StaffCreateNestedOneWithoutUserInput
  counselor: CounselorCreateNestedOneWithoutUserInput
  admin: AdminCreateNestedOneWithoutUserInput
  posts: PostCreateNestedManyWithoutAuthorInput
  counselingSession: CounselorSessionCreateNestedOneWithoutUserInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CounselorCreateNestedOneWithoutUserInput {
  create: CounselorCreateWithoutUserInput
  connectOrCreate: CounselorCreateOrConnectWithoutUserInput
  connect: CounselorWhereUniqueInput
}

input CounselorCreateWithoutUserInput {
  firstName: String!
  lastName: String!
  email: String!
  department: String
  expertise: String
  Schedule: ScheduleCreateNestedManyWithoutCounselorInput
  createdAt: DateTime
  updatedAt: DateTime
  CounselorSession: CounselorSessionCreateNestedManyWithoutCounselorInput
}

input ScheduleCreateNestedManyWithoutCounselorInput {
  create: [ScheduleCreateWithoutCounselorInput!]
  connectOrCreate: [ScheduleCreateOrConnectWithoutCounselorInput!]
  createMany: ScheduleCreateManyCounselorInputEnvelope
  connect: [ScheduleWhereUniqueInput!]
}

input ScheduleCreateWithoutCounselorInput {
  id: String
  days: DateTime!
  timeFrom: DateTime!
  timeTo: DateTime!
  hour: DateTime!
  CounselorSession: CounselorSessionCreateNestedManyWithoutCounselorScheduleInput
}

input CounselorSessionCreateNestedManyWithoutCounselorScheduleInput {
  create: [CounselorSessionCreateWithoutCounselorScheduleInput!]
  connectOrCreate: [CounselorSessionCreateOrConnectWithoutCounselorScheduleInput!]
  createMany: CounselorSessionCreateManyCounselorScheduleInputEnvelope
  connect: [CounselorSessionWhereUniqueInput!]
}

input CounselorSessionCreateWithoutCounselorScheduleInput {
  id: String
  counsellingReason: String
  counselor: CounselorCreateNestedOneWithoutCounselorSessionInput!
  student: StudentCreateNestedOneWithoutCounselorSessionInput
  staff: StaffCreateNestedOneWithoutCounselorSessionInput
  user: UserCreateNestedOneWithoutCounselingSessionInput
  counsellingDate: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
}

input StaffCreateNestedOneWithoutCounselorSessionInput {
  create: StaffCreateWithoutCounselorSessionInput
  connectOrCreate: StaffCreateOrConnectWithoutCounselorSessionInput
  connect: StaffWhereUniqueInput
}

input StaffCreateWithoutCounselorSessionInput {
  firstName: String!
  lastName: String!
  email: String!
  staffId: String!
  user: UserCreateNestedOneWithoutStaffInput
  faculty: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutStaffInput {
  create: UserCreateWithoutStaffInput
  connectOrCreate: UserCreateOrConnectWithoutStaffInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutStaffInput {
  id: String
  firstName: String!
  lastName: String!
  password: String!
  mobile: String
  gender: Gender
  accountStatus: AccountStatus
  role: Role!
  student: StudentCreateNestedOneWithoutUserInput
  counselor: CounselorCreateNestedOneWithoutUserInput
  admin: AdminCreateNestedOneWithoutUserInput
  posts: PostCreateNestedManyWithoutAuthorInput
  counselingSession: CounselorSessionCreateNestedOneWithoutUserInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AdminCreateNestedOneWithoutUserInput {
  create: AdminCreateWithoutUserInput
  connectOrCreate: AdminCreateOrConnectWithoutUserInput
  connect: AdminWhereUniqueInput
}

input AdminCreateWithoutUserInput {
  firstName: String!
  lastName: String!
  email: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input AdminCreateOrConnectWithoutUserInput {
  where: AdminWhereUniqueInput!
  create: AdminCreateWithoutUserInput!
}

input AdminWhereUniqueInput {
  id: String
  email: String
}

input PostCreateNestedManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  id: String
  title: String!
  body: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input PostCreateOrConnectWithoutAuthorInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutAuthorInput!
}

input PostCreateManyAuthorInputEnvelope {
  data: [PostCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input PostCreateManyAuthorInput {
  id: String
  title: String!
  body: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input CounselorSessionCreateNestedOneWithoutUserInput {
  create: CounselorSessionCreateWithoutUserInput
  connectOrCreate: CounselorSessionCreateOrConnectWithoutUserInput
  connect: CounselorSessionWhereUniqueInput
}

input CounselorSessionCreateWithoutUserInput {
  id: String
  counsellingReason: String
  counselor: CounselorCreateNestedOneWithoutCounselorSessionInput!
  student: StudentCreateNestedOneWithoutCounselorSessionInput
  staff: StaffCreateNestedOneWithoutCounselorSessionInput
  counselorSchedule: ScheduleCreateNestedOneWithoutCounselorSessionInput!
  counsellingDate: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
}

input ScheduleCreateNestedOneWithoutCounselorSessionInput {
  create: ScheduleCreateWithoutCounselorSessionInput
  connectOrCreate: ScheduleCreateOrConnectWithoutCounselorSessionInput
  connect: ScheduleWhereUniqueInput
}

input ScheduleCreateWithoutCounselorSessionInput {
  id: String
  days: DateTime!
  timeFrom: DateTime!
  timeTo: DateTime!
  hour: DateTime!
  Counselor: CounselorCreateNestedOneWithoutScheduleInput
}

input CounselorCreateNestedOneWithoutScheduleInput {
  create: CounselorCreateWithoutScheduleInput
  connectOrCreate: CounselorCreateOrConnectWithoutScheduleInput
  connect: CounselorWhereUniqueInput
}

input CounselorCreateWithoutScheduleInput {
  firstName: String!
  lastName: String!
  email: String!
  department: String
  user: UserCreateNestedOneWithoutCounselorInput
  expertise: String
  createdAt: DateTime
  updatedAt: DateTime
  CounselorSession: CounselorSessionCreateNestedManyWithoutCounselorInput
}

input CounselorSessionCreateNestedManyWithoutCounselorInput {
  create: [CounselorSessionCreateWithoutCounselorInput!]
  connectOrCreate: [CounselorSessionCreateOrConnectWithoutCounselorInput!]
  createMany: CounselorSessionCreateManyCounselorInputEnvelope
  connect: [CounselorSessionWhereUniqueInput!]
}

input CounselorSessionCreateWithoutCounselorInput {
  id: String
  counsellingReason: String
  student: StudentCreateNestedOneWithoutCounselorSessionInput
  staff: StaffCreateNestedOneWithoutCounselorSessionInput
  user: UserCreateNestedOneWithoutCounselingSessionInput
  counselorSchedule: ScheduleCreateNestedOneWithoutCounselorSessionInput!
  counsellingDate: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutCounselingSessionInput {
  create: UserCreateWithoutCounselingSessionInput
  connectOrCreate: UserCreateOrConnectWithoutCounselingSessionInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCounselingSessionInput {
  id: String
  firstName: String!
  lastName: String!
  password: String!
  mobile: String
  gender: Gender
  accountStatus: AccountStatus
  role: Role!
  student: StudentCreateNestedOneWithoutUserInput
  staff: StaffCreateNestedOneWithoutUserInput
  counselor: CounselorCreateNestedOneWithoutUserInput
  admin: AdminCreateNestedOneWithoutUserInput
  posts: PostCreateNestedManyWithoutAuthorInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateOrConnectWithoutCounselingSessionInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutCounselingSessionInput!
}

input CounselorSessionCreateOrConnectWithoutCounselorInput {
  where: CounselorSessionWhereUniqueInput!
  create: CounselorSessionCreateWithoutCounselorInput!
}

input CounselorSessionCreateManyCounselorInputEnvelope {
  data: [CounselorSessionCreateManyCounselorInput!]!
  skipDuplicates: Boolean
}

input CounselorSessionCreateManyCounselorInput {
  id: String
  counsellingReason: String
  scheduleId: String!
  userId: String
  studentId: String
  staffId: String
  counsellingDate: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
}

input CounselorCreateOrConnectWithoutScheduleInput {
  where: CounselorWhereUniqueInput!
  create: CounselorCreateWithoutScheduleInput!
}

input ScheduleCreateOrConnectWithoutCounselorSessionInput {
  where: ScheduleWhereUniqueInput!
  create: ScheduleCreateWithoutCounselorSessionInput!
}

input CounselorSessionCreateOrConnectWithoutUserInput {
  where: CounselorSessionWhereUniqueInput!
  create: CounselorSessionCreateWithoutUserInput!
}

input UserCreateOrConnectWithoutStaffInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutStaffInput!
}

input StaffCreateOrConnectWithoutCounselorSessionInput {
  where: StaffWhereUniqueInput!
  create: StaffCreateWithoutCounselorSessionInput!
}

input StaffWhereUniqueInput {
  id: String
  email: String
  staffId: String
}

input CounselorSessionCreateOrConnectWithoutCounselorScheduleInput {
  where: CounselorSessionWhereUniqueInput!
  create: CounselorSessionCreateWithoutCounselorScheduleInput!
}

input CounselorSessionCreateManyCounselorScheduleInputEnvelope {
  data: [CounselorSessionCreateManyCounselorScheduleInput!]!
  skipDuplicates: Boolean
}

input CounselorSessionCreateManyCounselorScheduleInput {
  id: String
  counsellingReason: String
  counselorId: String!
  userId: String
  studentId: String
  staffId: String
  counsellingDate: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
}

input ScheduleCreateOrConnectWithoutCounselorInput {
  where: ScheduleWhereUniqueInput!
  create: ScheduleCreateWithoutCounselorInput!
}

input ScheduleCreateManyCounselorInputEnvelope {
  data: [ScheduleCreateManyCounselorInput!]!
  skipDuplicates: Boolean
}

input ScheduleCreateManyCounselorInput {
  id: String
  days: DateTime!
  timeFrom: DateTime!
  timeTo: DateTime!
  hour: DateTime!
}

input CounselorCreateOrConnectWithoutUserInput {
  where: CounselorWhereUniqueInput!
  create: CounselorCreateWithoutUserInput!
}

input UserCreateOrConnectWithoutStudentInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutStudentInput!
}

input StudentCreateOrConnectWithoutCounselorSessionInput {
  where: StudentWhereUniqueInput!
  create: StudentCreateWithoutCounselorSessionInput!
}

input CounselorSessionCreateOrConnectWithoutStaffInput {
  where: CounselorSessionWhereUniqueInput!
  create: CounselorSessionCreateWithoutStaffInput!
}

input CounselorSessionCreateManyStaffInputEnvelope {
  data: [CounselorSessionCreateManyStaffInput!]!
  skipDuplicates: Boolean
}

input CounselorSessionCreateManyStaffInput {
  id: String
  counsellingReason: String
  scheduleId: String!
  counselorId: String!
  userId: String
  studentId: String
  counsellingDate: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
}

input StaffCreateOrConnectWithoutUserInput {
  where: StaffWhereUniqueInput!
  create: StaffCreateWithoutUserInput!
}

input UserCreateOrConnectWithoutCounselorInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutCounselorInput!
}

input CounselorCreateOrConnectWithoutCounselorSessionInput {
  where: CounselorWhereUniqueInput!
  create: CounselorCreateWithoutCounselorSessionInput!
}

input CounselorSessionCreateOrConnectWithoutStudentInput {
  where: CounselorSessionWhereUniqueInput!
  create: CounselorSessionCreateWithoutStudentInput!
}

input CounselorSessionCreateManyStudentInputEnvelope {
  data: [CounselorSessionCreateManyStudentInput!]!
  skipDuplicates: Boolean
}

input CounselorSessionCreateManyStudentInput {
  id: String
  counsellingReason: String
  scheduleId: String!
  counselorId: String!
  userId: String
  staffId: String
  counsellingDate: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
}

input StudentUpsertWithoutUserInput {
  update: StudentUpdateWithoutUserInput!
  create: StudentCreateWithoutUserInput!
}

input StudentUpdateWithoutUserInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  matrix: NullableStringFieldUpdateOperationsInput
  faculty: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  CounselorSession: CounselorSessionUpdateManyWithoutStudentInput
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input CounselorSessionUpdateManyWithoutStudentInput {
  create: [CounselorSessionCreateWithoutStudentInput!]
  connectOrCreate: [CounselorSessionCreateOrConnectWithoutStudentInput!]
  upsert: [CounselorSessionUpsertWithWhereUniqueWithoutStudentInput!]
  createMany: CounselorSessionCreateManyStudentInputEnvelope
  set: [CounselorSessionWhereUniqueInput!]
  disconnect: [CounselorSessionWhereUniqueInput!]
  delete: [CounselorSessionWhereUniqueInput!]
  connect: [CounselorSessionWhereUniqueInput!]
  update: [CounselorSessionUpdateWithWhereUniqueWithoutStudentInput!]
  updateMany: [CounselorSessionUpdateManyWithWhereWithoutStudentInput!]
  deleteMany: [CounselorSessionScalarWhereInput!]
}

input CounselorSessionUpsertWithWhereUniqueWithoutStudentInput {
  where: CounselorSessionWhereUniqueInput!
  update: CounselorSessionUpdateWithoutStudentInput!
  create: CounselorSessionCreateWithoutStudentInput!
}

input CounselorSessionUpdateWithoutStudentInput {
  id: StringFieldUpdateOperationsInput
  counsellingReason: NullableStringFieldUpdateOperationsInput
  counselor: CounselorUpdateOneRequiredWithoutCounselorSessionInput
  staff: StaffUpdateOneWithoutCounselorSessionInput
  user: UserUpdateOneWithoutCounselingSessionInput
  counselorSchedule: ScheduleUpdateOneRequiredWithoutCounselorSessionInput
  counsellingDate: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CounselorUpdateOneRequiredWithoutCounselorSessionInput {
  create: CounselorCreateWithoutCounselorSessionInput
  connectOrCreate: CounselorCreateOrConnectWithoutCounselorSessionInput
  upsert: CounselorUpsertWithoutCounselorSessionInput
  connect: CounselorWhereUniqueInput
  update: CounselorUpdateWithoutCounselorSessionInput
}

input CounselorUpsertWithoutCounselorSessionInput {
  update: CounselorUpdateWithoutCounselorSessionInput!
  create: CounselorCreateWithoutCounselorSessionInput!
}

input CounselorUpdateWithoutCounselorSessionInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  department: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCounselorInput
  expertise: NullableStringFieldUpdateOperationsInput
  Schedule: ScheduleUpdateManyWithoutCounselorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutCounselorInput {
  create: UserCreateWithoutCounselorInput
  connectOrCreate: UserCreateOrConnectWithoutCounselorInput
  upsert: UserUpsertWithoutCounselorInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCounselorInput
}

input UserUpsertWithoutCounselorInput {
  update: UserUpdateWithoutCounselorInput!
  create: UserCreateWithoutCounselorInput!
}

input UserUpdateWithoutCounselorInput {
  id: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  mobile: NullableStringFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  accountStatus: EnumAccountStatusFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  student: StudentUpdateOneWithoutUserInput
  staff: StaffUpdateOneWithoutUserInput
  admin: AdminUpdateOneWithoutUserInput
  posts: PostUpdateManyWithoutAuthorInput
  counselingSession: CounselorSessionUpdateOneWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StaffUpdateOneWithoutUserInput {
  create: StaffCreateWithoutUserInput
  connectOrCreate: StaffCreateOrConnectWithoutUserInput
  upsert: StaffUpsertWithoutUserInput
  disconnect: Boolean
  delete: Boolean
  connect: StaffWhereUniqueInput
  update: StaffUpdateWithoutUserInput
}

input StaffUpsertWithoutUserInput {
  update: StaffUpdateWithoutUserInput!
  create: StaffCreateWithoutUserInput!
}

input StaffUpdateWithoutUserInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  staffId: StringFieldUpdateOperationsInput
  faculty: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  CounselorSession: CounselorSessionUpdateManyWithoutStaffInput
}

input CounselorSessionUpdateManyWithoutStaffInput {
  create: [CounselorSessionCreateWithoutStaffInput!]
  connectOrCreate: [CounselorSessionCreateOrConnectWithoutStaffInput!]
  upsert: [CounselorSessionUpsertWithWhereUniqueWithoutStaffInput!]
  createMany: CounselorSessionCreateManyStaffInputEnvelope
  set: [CounselorSessionWhereUniqueInput!]
  disconnect: [CounselorSessionWhereUniqueInput!]
  delete: [CounselorSessionWhereUniqueInput!]
  connect: [CounselorSessionWhereUniqueInput!]
  update: [CounselorSessionUpdateWithWhereUniqueWithoutStaffInput!]
  updateMany: [CounselorSessionUpdateManyWithWhereWithoutStaffInput!]
  deleteMany: [CounselorSessionScalarWhereInput!]
}

input CounselorSessionUpsertWithWhereUniqueWithoutStaffInput {
  where: CounselorSessionWhereUniqueInput!
  update: CounselorSessionUpdateWithoutStaffInput!
  create: CounselorSessionCreateWithoutStaffInput!
}

input CounselorSessionUpdateWithoutStaffInput {
  id: StringFieldUpdateOperationsInput
  counsellingReason: NullableStringFieldUpdateOperationsInput
  counselor: CounselorUpdateOneRequiredWithoutCounselorSessionInput
  student: StudentUpdateOneWithoutCounselorSessionInput
  user: UserUpdateOneWithoutCounselingSessionInput
  counselorSchedule: ScheduleUpdateOneRequiredWithoutCounselorSessionInput
  counsellingDate: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StudentUpdateOneWithoutCounselorSessionInput {
  create: StudentCreateWithoutCounselorSessionInput
  connectOrCreate: StudentCreateOrConnectWithoutCounselorSessionInput
  upsert: StudentUpsertWithoutCounselorSessionInput
  disconnect: Boolean
  delete: Boolean
  connect: StudentWhereUniqueInput
  update: StudentUpdateWithoutCounselorSessionInput
}

input StudentUpsertWithoutCounselorSessionInput {
  update: StudentUpdateWithoutCounselorSessionInput!
  create: StudentCreateWithoutCounselorSessionInput!
}

input StudentUpdateWithoutCounselorSessionInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  matrix: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutStudentInput
  faculty: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutStudentInput {
  create: UserCreateWithoutStudentInput
  connectOrCreate: UserCreateOrConnectWithoutStudentInput
  upsert: UserUpsertWithoutStudentInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutStudentInput
}

input UserUpsertWithoutStudentInput {
  update: UserUpdateWithoutStudentInput!
  create: UserCreateWithoutStudentInput!
}

input UserUpdateWithoutStudentInput {
  id: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  mobile: NullableStringFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  accountStatus: EnumAccountStatusFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  staff: StaffUpdateOneWithoutUserInput
  counselor: CounselorUpdateOneWithoutUserInput
  admin: AdminUpdateOneWithoutUserInput
  posts: PostUpdateManyWithoutAuthorInput
  counselingSession: CounselorSessionUpdateOneWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CounselorUpdateOneWithoutUserInput {
  create: CounselorCreateWithoutUserInput
  connectOrCreate: CounselorCreateOrConnectWithoutUserInput
  upsert: CounselorUpsertWithoutUserInput
  disconnect: Boolean
  delete: Boolean
  connect: CounselorWhereUniqueInput
  update: CounselorUpdateWithoutUserInput
}

input CounselorUpsertWithoutUserInput {
  update: CounselorUpdateWithoutUserInput!
  create: CounselorCreateWithoutUserInput!
}

input CounselorUpdateWithoutUserInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  department: NullableStringFieldUpdateOperationsInput
  expertise: NullableStringFieldUpdateOperationsInput
  Schedule: ScheduleUpdateManyWithoutCounselorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  CounselorSession: CounselorSessionUpdateManyWithoutCounselorInput
}

input ScheduleUpdateManyWithoutCounselorInput {
  create: [ScheduleCreateWithoutCounselorInput!]
  connectOrCreate: [ScheduleCreateOrConnectWithoutCounselorInput!]
  upsert: [ScheduleUpsertWithWhereUniqueWithoutCounselorInput!]
  createMany: ScheduleCreateManyCounselorInputEnvelope
  set: [ScheduleWhereUniqueInput!]
  disconnect: [ScheduleWhereUniqueInput!]
  delete: [ScheduleWhereUniqueInput!]
  connect: [ScheduleWhereUniqueInput!]
  update: [ScheduleUpdateWithWhereUniqueWithoutCounselorInput!]
  updateMany: [ScheduleUpdateManyWithWhereWithoutCounselorInput!]
  deleteMany: [ScheduleScalarWhereInput!]
}

input ScheduleUpsertWithWhereUniqueWithoutCounselorInput {
  where: ScheduleWhereUniqueInput!
  update: ScheduleUpdateWithoutCounselorInput!
  create: ScheduleCreateWithoutCounselorInput!
}

input ScheduleUpdateWithoutCounselorInput {
  id: StringFieldUpdateOperationsInput
  days: DateTimeFieldUpdateOperationsInput
  timeFrom: DateTimeFieldUpdateOperationsInput
  timeTo: DateTimeFieldUpdateOperationsInput
  hour: DateTimeFieldUpdateOperationsInput
  CounselorSession: CounselorSessionUpdateManyWithoutCounselorScheduleInput
}

input CounselorSessionUpdateManyWithoutCounselorScheduleInput {
  create: [CounselorSessionCreateWithoutCounselorScheduleInput!]
  connectOrCreate: [CounselorSessionCreateOrConnectWithoutCounselorScheduleInput!]
  upsert: [CounselorSessionUpsertWithWhereUniqueWithoutCounselorScheduleInput!]
  createMany: CounselorSessionCreateManyCounselorScheduleInputEnvelope
  set: [CounselorSessionWhereUniqueInput!]
  disconnect: [CounselorSessionWhereUniqueInput!]
  delete: [CounselorSessionWhereUniqueInput!]
  connect: [CounselorSessionWhereUniqueInput!]
  update: [CounselorSessionUpdateWithWhereUniqueWithoutCounselorScheduleInput!]
  updateMany: [CounselorSessionUpdateManyWithWhereWithoutCounselorScheduleInput!]
  deleteMany: [CounselorSessionScalarWhereInput!]
}

input CounselorSessionUpsertWithWhereUniqueWithoutCounselorScheduleInput {
  where: CounselorSessionWhereUniqueInput!
  update: CounselorSessionUpdateWithoutCounselorScheduleInput!
  create: CounselorSessionCreateWithoutCounselorScheduleInput!
}

input CounselorSessionUpdateWithoutCounselorScheduleInput {
  id: StringFieldUpdateOperationsInput
  counsellingReason: NullableStringFieldUpdateOperationsInput
  counselor: CounselorUpdateOneRequiredWithoutCounselorSessionInput
  student: StudentUpdateOneWithoutCounselorSessionInput
  staff: StaffUpdateOneWithoutCounselorSessionInput
  user: UserUpdateOneWithoutCounselingSessionInput
  counsellingDate: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StaffUpdateOneWithoutCounselorSessionInput {
  create: StaffCreateWithoutCounselorSessionInput
  connectOrCreate: StaffCreateOrConnectWithoutCounselorSessionInput
  upsert: StaffUpsertWithoutCounselorSessionInput
  disconnect: Boolean
  delete: Boolean
  connect: StaffWhereUniqueInput
  update: StaffUpdateWithoutCounselorSessionInput
}

input StaffUpsertWithoutCounselorSessionInput {
  update: StaffUpdateWithoutCounselorSessionInput!
  create: StaffCreateWithoutCounselorSessionInput!
}

input StaffUpdateWithoutCounselorSessionInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  staffId: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutStaffInput
  faculty: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutStaffInput {
  create: UserCreateWithoutStaffInput
  connectOrCreate: UserCreateOrConnectWithoutStaffInput
  upsert: UserUpsertWithoutStaffInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutStaffInput
}

input UserUpsertWithoutStaffInput {
  update: UserUpdateWithoutStaffInput!
  create: UserCreateWithoutStaffInput!
}

input UserUpdateWithoutStaffInput {
  id: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  mobile: NullableStringFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  accountStatus: EnumAccountStatusFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  student: StudentUpdateOneWithoutUserInput
  counselor: CounselorUpdateOneWithoutUserInput
  admin: AdminUpdateOneWithoutUserInput
  posts: PostUpdateManyWithoutAuthorInput
  counselingSession: CounselorSessionUpdateOneWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AdminUpdateOneWithoutUserInput {
  create: AdminCreateWithoutUserInput
  connectOrCreate: AdminCreateOrConnectWithoutUserInput
  upsert: AdminUpsertWithoutUserInput
  disconnect: Boolean
  delete: Boolean
  connect: AdminWhereUniqueInput
  update: AdminUpdateWithoutUserInput
}

input AdminUpsertWithoutUserInput {
  update: AdminUpdateWithoutUserInput!
  create: AdminCreateWithoutUserInput!
}

input AdminUpdateWithoutUserInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorInput!
  create: PostCreateWithoutAuthorInput!
}

input PostUpdateWithoutAuthorInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  body: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorInput!
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyMutationInput!
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  id: StringFilter
  title: StringFilter
  body: StringFilter
  userId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PostUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  body: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CounselorSessionUpdateOneWithoutUserInput {
  create: CounselorSessionCreateWithoutUserInput
  connectOrCreate: CounselorSessionCreateOrConnectWithoutUserInput
  upsert: CounselorSessionUpsertWithoutUserInput
  disconnect: Boolean
  delete: Boolean
  connect: CounselorSessionWhereUniqueInput
  update: CounselorSessionUpdateWithoutUserInput
}

input CounselorSessionUpsertWithoutUserInput {
  update: CounselorSessionUpdateWithoutUserInput!
  create: CounselorSessionCreateWithoutUserInput!
}

input CounselorSessionUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  counsellingReason: NullableStringFieldUpdateOperationsInput
  counselor: CounselorUpdateOneRequiredWithoutCounselorSessionInput
  student: StudentUpdateOneWithoutCounselorSessionInput
  staff: StaffUpdateOneWithoutCounselorSessionInput
  counselorSchedule: ScheduleUpdateOneRequiredWithoutCounselorSessionInput
  counsellingDate: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ScheduleUpdateOneRequiredWithoutCounselorSessionInput {
  create: ScheduleCreateWithoutCounselorSessionInput
  connectOrCreate: ScheduleCreateOrConnectWithoutCounselorSessionInput
  upsert: ScheduleUpsertWithoutCounselorSessionInput
  connect: ScheduleWhereUniqueInput
  update: ScheduleUpdateWithoutCounselorSessionInput
}

input ScheduleUpsertWithoutCounselorSessionInput {
  update: ScheduleUpdateWithoutCounselorSessionInput!
  create: ScheduleCreateWithoutCounselorSessionInput!
}

input ScheduleUpdateWithoutCounselorSessionInput {
  id: StringFieldUpdateOperationsInput
  days: DateTimeFieldUpdateOperationsInput
  timeFrom: DateTimeFieldUpdateOperationsInput
  timeTo: DateTimeFieldUpdateOperationsInput
  hour: DateTimeFieldUpdateOperationsInput
  Counselor: CounselorUpdateOneWithoutScheduleInput
}

input CounselorUpdateOneWithoutScheduleInput {
  create: CounselorCreateWithoutScheduleInput
  connectOrCreate: CounselorCreateOrConnectWithoutScheduleInput
  upsert: CounselorUpsertWithoutScheduleInput
  disconnect: Boolean
  delete: Boolean
  connect: CounselorWhereUniqueInput
  update: CounselorUpdateWithoutScheduleInput
}

input CounselorUpsertWithoutScheduleInput {
  update: CounselorUpdateWithoutScheduleInput!
  create: CounselorCreateWithoutScheduleInput!
}

input CounselorUpdateWithoutScheduleInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  department: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCounselorInput
  expertise: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  CounselorSession: CounselorSessionUpdateManyWithoutCounselorInput
}

input CounselorSessionUpdateManyWithoutCounselorInput {
  create: [CounselorSessionCreateWithoutCounselorInput!]
  connectOrCreate: [CounselorSessionCreateOrConnectWithoutCounselorInput!]
  upsert: [CounselorSessionUpsertWithWhereUniqueWithoutCounselorInput!]
  createMany: CounselorSessionCreateManyCounselorInputEnvelope
  set: [CounselorSessionWhereUniqueInput!]
  disconnect: [CounselorSessionWhereUniqueInput!]
  delete: [CounselorSessionWhereUniqueInput!]
  connect: [CounselorSessionWhereUniqueInput!]
  update: [CounselorSessionUpdateWithWhereUniqueWithoutCounselorInput!]
  updateMany: [CounselorSessionUpdateManyWithWhereWithoutCounselorInput!]
  deleteMany: [CounselorSessionScalarWhereInput!]
}

input CounselorSessionUpsertWithWhereUniqueWithoutCounselorInput {
  where: CounselorSessionWhereUniqueInput!
  update: CounselorSessionUpdateWithoutCounselorInput!
  create: CounselorSessionCreateWithoutCounselorInput!
}

input CounselorSessionUpdateWithoutCounselorInput {
  id: StringFieldUpdateOperationsInput
  counsellingReason: NullableStringFieldUpdateOperationsInput
  student: StudentUpdateOneWithoutCounselorSessionInput
  staff: StaffUpdateOneWithoutCounselorSessionInput
  user: UserUpdateOneWithoutCounselingSessionInput
  counselorSchedule: ScheduleUpdateOneRequiredWithoutCounselorSessionInput
  counsellingDate: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneWithoutCounselingSessionInput {
  create: UserCreateWithoutCounselingSessionInput
  connectOrCreate: UserCreateOrConnectWithoutCounselingSessionInput
  upsert: UserUpsertWithoutCounselingSessionInput
  disconnect: Boolean
  delete: Boolean
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCounselingSessionInput
}

input UserUpsertWithoutCounselingSessionInput {
  update: UserUpdateWithoutCounselingSessionInput!
  create: UserCreateWithoutCounselingSessionInput!
}

input UserUpdateWithoutCounselingSessionInput {
  id: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  mobile: NullableStringFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  accountStatus: EnumAccountStatusFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  student: StudentUpdateOneWithoutUserInput
  staff: StaffUpdateOneWithoutUserInput
  counselor: CounselorUpdateOneWithoutUserInput
  admin: AdminUpdateOneWithoutUserInput
  posts: PostUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CounselorSessionUpdateWithWhereUniqueWithoutCounselorInput {
  where: CounselorSessionWhereUniqueInput!
  data: CounselorSessionUpdateWithoutCounselorInput!
}

input CounselorSessionUpdateManyWithWhereWithoutCounselorInput {
  where: CounselorSessionScalarWhereInput!
  data: CounselorSessionUpdateManyMutationInput!
}

input CounselorSessionScalarWhereInput {
  AND: [CounselorSessionScalarWhereInput!]
  OR: [CounselorSessionScalarWhereInput!]
  NOT: [CounselorSessionScalarWhereInput!]
  id: StringFilter
  counsellingReason: StringNullableFilter
  scheduleId: StringFilter
  counselorId: StringFilter
  userId: StringNullableFilter
  studentId: StringNullableFilter
  staffId: StringNullableFilter
  counsellingDate: DateTimeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CounselorSessionUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  counsellingReason: NullableStringFieldUpdateOperationsInput
  counsellingDate: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CounselorSessionUpdateWithWhereUniqueWithoutCounselorScheduleInput {
  where: CounselorSessionWhereUniqueInput!
  data: CounselorSessionUpdateWithoutCounselorScheduleInput!
}

input CounselorSessionUpdateManyWithWhereWithoutCounselorScheduleInput {
  where: CounselorSessionScalarWhereInput!
  data: CounselorSessionUpdateManyMutationInput!
}

input ScheduleUpdateWithWhereUniqueWithoutCounselorInput {
  where: ScheduleWhereUniqueInput!
  data: ScheduleUpdateWithoutCounselorInput!
}

input ScheduleUpdateManyWithWhereWithoutCounselorInput {
  where: ScheduleScalarWhereInput!
  data: ScheduleUpdateManyMutationInput!
}

input ScheduleScalarWhereInput {
  AND: [ScheduleScalarWhereInput!]
  OR: [ScheduleScalarWhereInput!]
  NOT: [ScheduleScalarWhereInput!]
  id: StringFilter
  days: DateTimeFilter
  timeFrom: DateTimeFilter
  timeTo: DateTimeFilter
  hour: DateTimeFilter
  counselorId: StringNullableFilter
}

input ScheduleUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  days: DateTimeFieldUpdateOperationsInput
  timeFrom: DateTimeFieldUpdateOperationsInput
  timeTo: DateTimeFieldUpdateOperationsInput
  hour: DateTimeFieldUpdateOperationsInput
}

input CounselorSessionUpdateWithWhereUniqueWithoutStaffInput {
  where: CounselorSessionWhereUniqueInput!
  data: CounselorSessionUpdateWithoutStaffInput!
}

input CounselorSessionUpdateManyWithWhereWithoutStaffInput {
  where: CounselorSessionScalarWhereInput!
  data: CounselorSessionUpdateManyMutationInput!
}

input CounselorSessionUpdateWithWhereUniqueWithoutStudentInput {
  where: CounselorSessionWhereUniqueInput!
  data: CounselorSessionUpdateWithoutStudentInput!
}

input CounselorSessionUpdateManyWithWhereWithoutStudentInput {
  where: CounselorSessionScalarWhereInput!
  data: CounselorSessionUpdateManyMutationInput!
}

input PostCreateInput {
  id: String
  title: String!
  body: String!
  author: UserCreateNestedOneWithoutPostsInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  id: String
  firstName: String!
  lastName: String!
  password: String!
  mobile: String
  gender: Gender
  accountStatus: AccountStatus
  role: Role!
  student: StudentCreateNestedOneWithoutUserInput
  staff: StaffCreateNestedOneWithoutUserInput
  counselor: CounselorCreateNestedOneWithoutUserInput
  admin: AdminCreateNestedOneWithoutUserInput
  counselingSession: CounselorSessionCreateNestedOneWithoutUserInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateOrConnectWithoutPostsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutPostsInput!
}

input PostUpdateInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  body: StringFieldUpdateOperationsInput
  author: UserUpdateOneRequiredWithoutPostsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPostsInput
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpdateWithoutPostsInput {
  id: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  mobile: NullableStringFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  accountStatus: EnumAccountStatusFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  student: StudentUpdateOneWithoutUserInput
  staff: StaffUpdateOneWithoutUserInput
  counselor: CounselorUpdateOneWithoutUserInput
  admin: AdminUpdateOneWithoutUserInput
  counselingSession: CounselorSessionUpdateOneWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MessageCreateInput {
  id: String
  sender: String!
  reciever: String!
  Message: String!
}

input MessageUpdateInput {
  id: StringFieldUpdateOperationsInput
  sender: StringFieldUpdateOperationsInput
  reciever: StringFieldUpdateOperationsInput
  Message: StringFieldUpdateOperationsInput
}

input ChatCreateInput {
  id: String
  chatStatus: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ChatUpdateInput {
  id: StringFieldUpdateOperationsInput
  chatStatus: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EventCreateInput {
  id: String
  title: String!
  eventImageURL: String
  eventDetails: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input EventUpdateInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  eventImageURL: NullableStringFieldUpdateOperationsInput
  eventDetails: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FAQCreateInput {
  id: String
  title: String!
  answer: String!
  icon: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input FAQUpdateInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  answer: StringFieldUpdateOperationsInput
  icon: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ScheduleCreateInput {
  id: String
  days: DateTime!
  timeFrom: DateTime!
  timeTo: DateTime!
  hour: DateTime!
  CounselorSession: CounselorSessionCreateNestedManyWithoutCounselorScheduleInput
  Counselor: CounselorCreateNestedOneWithoutScheduleInput
}

input ScheduleUpdateInput {
  id: StringFieldUpdateOperationsInput
  days: DateTimeFieldUpdateOperationsInput
  timeFrom: DateTimeFieldUpdateOperationsInput
  timeTo: DateTimeFieldUpdateOperationsInput
  hour: DateTimeFieldUpdateOperationsInput
  CounselorSession: CounselorSessionUpdateManyWithoutCounselorScheduleInput
  Counselor: CounselorUpdateOneWithoutScheduleInput
}

input CounselorSessionCreateInput {
  id: String
  counsellingReason: String
  counselor: CounselorCreateNestedOneWithoutCounselorSessionInput!
  student: StudentCreateNestedOneWithoutCounselorSessionInput
  staff: StaffCreateNestedOneWithoutCounselorSessionInput
  user: UserCreateNestedOneWithoutCounselingSessionInput
  counselorSchedule: ScheduleCreateNestedOneWithoutCounselorSessionInput!
  counsellingDate: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
}

input CounselorSessionUpdateInput {
  id: StringFieldUpdateOperationsInput
  counsellingReason: NullableStringFieldUpdateOperationsInput
  counselor: CounselorUpdateOneRequiredWithoutCounselorSessionInput
  student: StudentUpdateOneWithoutCounselorSessionInput
  staff: StaffUpdateOneWithoutCounselorSessionInput
  user: UserUpdateOneWithoutCounselingSessionInput
  counselorSchedule: ScheduleUpdateOneRequiredWithoutCounselorSessionInput
  counsellingDate: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LoginInput {
  email: String!
  password: String!
  role: Role!
}

input SignupInput {
  email: String!
  password: String!
  firstName: String
  lastName: String
  role: Role!
  mobile: String
  accountStatus: AccountStatus!
}
