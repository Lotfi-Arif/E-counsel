// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../libs/common/src/generated/index"
}

model User {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  password          String?
  mobile            String?            @unique
  gender            Gender?
  accountStatus     AccountStatus      @default(UNVERIFIED)
  role              Role
  student           Student?
  staff             Staff?
  counselor         Counselor?
  admin             Admin?
  posts             Post[]
  counselingSession CounselorSession[] @relation(references: [id])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Schedule {
  id           String   @id @default(uuid())
  scheduleDate DateTime
}

model CounselorSession {
  id           String   @id @default(uuid())
  participants User[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Student {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  matrix    String   @unique
  user      User     @relation(fields: [id], references: [id], onDelete: Cascade)
  faculty   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id        String   @id @unique
  email     String   @unique
  password  String
  user      User     @relation(fields: [id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Staff {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  staffId   String   @unique
  user      User     @relation(fields: [id], references: [id], onDelete: Cascade)
  faculty   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Counselor {
  id         String   @id @default(uuid())
  department String
  user       User     @relation(fields: [id], references: [id], onDelete: Cascade)
  expertise  String
  Schedule   String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Post {
  id        String   @id @default(uuid())
  title     String
  body      String
  userId    String
  author    User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id         String   @id @default(uuid())
  chatStatus String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Message {
  id       String @id @default(uuid())
  sender   String
  reciever String
  Message  String
}

model Event {
  id           String  @id @default(uuid())
  title        String
  eventImage   Asset?  @relation("ImageEventAsset", fields: [imageId], references: [id])
  imageId      String? @unique
  eventDetails String
}

model FAQ {
  id       String @id @default(uuid())
  question String
  answer   String
}

model Asset {
  id              String          @id @default(uuid())
  originalName    String
  fileName        String
  fileType        FileType        @default(IMAGE)
  url             String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  uploadingState  UploadingState? @default(uploaded)
  eventImageAsset Event?          @relation("ImageEventAsset")
}

enum FileType {
  VIDEO
  PDF
  IMAGE
  ZIP
  OTHER
}

enum UploadingState {
  uploading
  uploaded
}

enum AccountStatus {
  VERIFIED
  UNVERIFIED
}

enum Role {
  ADMIN
  USER
  STUDENT
  COUNSELOR
  DEPARTMENT_MANAGER
}

enum Gender {
  M
  F
  OTHERS
}
