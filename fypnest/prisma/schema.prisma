// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../libs/common/src/generated/index"
}

model User {
  id                String            @id @default(uuid())
  name              String
  email             String            @unique
  password          String?
  mobile            String?           @unique
  gender            Gender?
  accountStatus     AccountStatus     @default(UNVERIFIED)
  role              Role
  student           Student?
  staff             Staff?
  counselor         Counselor?
  admin             Admin?
  posts             Post[]
  counselingSession CounselorSession?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Schedule {
  id       String   @id @default(uuid())
  days     DateTime
  timeFrom DateTime
  timeTo   DateTime
}

model CounselorSession {
  id                String    @id @default(uuid())
  counsellingReason String?
  counselor         Counselor @relation(fields: [counselorId], references: [id])
  student           Student?  @relation(fields: [studentId], references: [id])
  staff             Staff?    @relation(fields: [staffId], references: [id])
  User              User?     @relation(fields: [userId], references: [id])
  counselorId       String
  userId            String?   @unique
  studentId         String?
  staffId           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Student {
  id               String             @id @default(uuid())
  email            String             @unique
  password         String
  matrix           String             @unique
  user             User               @relation(fields: [id], references: [id], onDelete: Cascade)
  faculty          String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  CounselorSession CounselorSession[]
}

model Admin {
  id        String   @id @unique
  email     String   @unique
  password  String
  user      User     @relation(fields: [id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Staff {
  id               String             @id @default(uuid())
  email            String             @unique
  password         String
  staffId          String             @unique
  user             User               @relation(fields: [id], references: [id], onDelete: Cascade)
  faculty          String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  CounselorSession CounselorSession[]
}

model Counselor {
  id               String             @id @default(uuid())
  department       String
  user             User               @relation(fields: [id], references: [id], onDelete: Cascade)
  expertise        String
  Schedule         String[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  CounselorSession CounselorSession[]
}

model Post {
  id        String   @id @default(uuid())
  title     String
  body      String
  userId    String
  author    User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id         String   @id @default(uuid())
  chatStatus String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Message {
  id       String @id @default(uuid())
  sender   String
  reciever String
  Message  String
}

model Event {
  id            String   @id @default(uuid())
  title         String
  eventImageURL String?
  eventDetails  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model FAQ {
  id        String   @id @default(uuid())
  title     String
  answer    String
  icon      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Asset {
  id             String          @id @default(uuid())
  originalName   String?
  fileName       String?
  fileType       FileType        @default(IMAGE)
  url            String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  uploadingState UploadingState? @default(uploaded)
  // eventImageAsset Event?          @relation("ImageEventAsset")
}

enum FileType {
  VIDEO
  PDF
  IMAGE
  ZIP
  OTHER
}

enum UploadingState {
  uploading
  uploaded
}

enum AccountStatus {
  VERIFIED
  UNVERIFIED
  APPROVED
  REJECTED
}

enum Role {
  ADMIN
  USER
  STUDENT
  COUNSELOR
  STAFF
}

enum Gender {
  M
  F
  OTHERS
}
