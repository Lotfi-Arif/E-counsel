datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider       = "node node_modules/prisma-nestjs-graphql"
  output         = "../libs/prisma/src/generated/nestgraphql"
  packageVersion = "1.0.0"
}

enum UserRole {
  ADMIN
  USER
  MANAGER
}

enum MediaType {
  IMAGE
  VIDEO
  OTHER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id        String    @id @default(uuid())
  firstName String?
  lastName  String?
  role      UserRole  @default(USER)
  orders    Order[]
  reviews   Review[]
  cart      Cart?
  address   Address[]
  auth      Auth? // One-to-one relation with Auth
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Auth {
  id                   String    @id @default(uuid())
  userId               String    @unique
  user                 User      @relation(fields: [userId], references: [id])
  email                String    @unique
  password             String // Hashed password
  refreshToken         String? // Store the refresh token (hashed for security)
  accessToken          String?
  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?
  //TODO: add fields for token expiry, created IP, and user agent when needed.
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Address {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String? // Should not be unique if one address can belong to one user only
  line1     String
  line2     String?
  city      String
  state     String
  zip       String
  country   String
  orders    Order[] // If an address can be associated with multiple orders
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  SKU         String     @unique
  categories  Category[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  reviews     Review[]
  media       Media[]
  cartItems   CartItem[]
}

model Category {
  id       String    @id @default(uuid())
  name     String
  products Product[]
}

model Cart {
  id         String     @id @default(uuid())
  userId     String     @unique
  user       User       @relation(fields: [userId], references: [id])
  cartItems  CartItem[]
  discount   Discount?  @relation(fields: [discountId], references: [id])
  discountId String?
  coupon     Coupon?    @relation(fields: [couponId], references: [id])
  couponId   String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Discount {
  id          String   @id @default(uuid())
  percentage  Float? // Represents percentage-based discount, e.g., 10 for 10%
  flatAmount  Float? // Represents flat amount discount, e.g., 5 for $5 off
  description String?
  carts       Cart[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Coupon {
  id         String    @id @default(uuid())
  code       String    @unique
  percentage Float? // Represents percentage-based discount, e.g., 15 for 15%
  flatAmount Float? // Represents flat amount discount, e.g., 20 for $20 off
  oneTimeUse Boolean   @default(true)
  expiration DateTime?
  carts      Cart[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String?
  order     Order?   @relation(fields: [orderId], references: [id], name: "OrderToCartItem")
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  totalAmount Float
  status      OrderStatus @default(PENDING)
  items       CartItem[]  @relation(name: "OrderToCartItem") // Match this name with CartItem's relation name
  payments    Payment[]
  addressId   String?
  address     Address?    @relation(fields: [addressId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Payment {
  id            String   @id @default(uuid())
  orderId       String
  order         Order    @relation(fields: [orderId], references: [id])
  paymentMethod String
  amount        Float
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  content   String
  rating    Int
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id          String    @id @default(uuid())
  type        MediaType
  filename    String // Name of the file in the S3 bucket
  contentType String // MIME type of the file, e.g., 'image/jpeg'
  url         String // S3 URL for the media
  productId   String?
  product     Product?  @relation(fields: [productId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
