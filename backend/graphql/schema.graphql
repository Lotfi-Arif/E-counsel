# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Address {
  _count: AddressCount!
  city: String!
  country: String!
  createdAt: DateTime!
  id: ID!
  line1: String!
  line2: String
  orders: [Order!]
  state: String!
  updatedAt: DateTime!
  user: User
  userId: String
  zip: String!
}

type AddressCount {
  orders: Int!
}

input AddressCreateManyUserInput {
  city: String!
  country: String!
  createdAt: DateTime
  id: String
  line1: String!
  line2: String
  state: String!
  updatedAt: DateTime
  zip: String!
}

input AddressCreateManyUserInputEnvelope {
  data: [AddressCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AddressCreateNestedManyWithoutUserInput {
  connect: [AddressWhereUniqueInput!]
  connectOrCreate: [AddressCreateOrConnectWithoutUserInput!]
  create: [AddressCreateWithoutUserInput!]
  createMany: AddressCreateManyUserInputEnvelope
}

input AddressCreateNestedOneWithoutOrdersInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutOrdersInput
  create: AddressCreateWithoutOrdersInput
}

input AddressCreateOrConnectWithoutOrdersInput {
  create: AddressCreateWithoutOrdersInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateOrConnectWithoutUserInput {
  create: AddressCreateWithoutUserInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateWithoutOrdersInput {
  city: String!
  country: String!
  createdAt: DateTime
  id: String
  line1: String!
  line2: String
  state: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutAddressInput
  zip: String!
}

input AddressCreateWithoutUserInput {
  city: String!
  country: String!
  createdAt: DateTime
  id: String
  line1: String!
  line2: String
  orders: OrderCreateNestedManyWithoutAddressInput
  state: String!
  updatedAt: DateTime
  zip: String!
}

input AddressListRelationFilter {
  every: AddressWhereInput
  none: AddressWhereInput
  some: AddressWhereInput
}

input AddressNullableRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

input AddressScalarWhereInput {
  AND: [AddressScalarWhereInput!]
  NOT: [AddressScalarWhereInput!]
  OR: [AddressScalarWhereInput!]
  city: StringFilter
  country: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  line1: StringFilter
  line2: StringNullableFilter
  state: StringFilter
  updatedAt: DateTimeFilter
  userId: StringNullableFilter
  zip: StringFilter
}

input AddressUpdateManyMutationInput {
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  line1: StringFieldUpdateOperationsInput
  line2: NullableStringFieldUpdateOperationsInput
  state: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  zip: StringFieldUpdateOperationsInput
}

input AddressUpdateManyWithWhereWithoutUserInput {
  data: AddressUpdateManyMutationInput!
  where: AddressScalarWhereInput!
}

input AddressUpdateManyWithoutUserNestedInput {
  connect: [AddressWhereUniqueInput!]
  connectOrCreate: [AddressCreateOrConnectWithoutUserInput!]
  create: [AddressCreateWithoutUserInput!]
  createMany: AddressCreateManyUserInputEnvelope
  delete: [AddressWhereUniqueInput!]
  deleteMany: [AddressScalarWhereInput!]
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AddressUpdateManyWithWhereWithoutUserInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutUserInput!]
}

input AddressUpdateOneWithoutOrdersNestedInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutOrdersInput
  create: AddressCreateWithoutOrdersInput
  delete: AddressWhereInput
  disconnect: AddressWhereInput
  update: AddressUpdateToOneWithWhereWithoutOrdersInput
  upsert: AddressUpsertWithoutOrdersInput
}

input AddressUpdateToOneWithWhereWithoutOrdersInput {
  data: AddressUpdateWithoutOrdersInput!
  where: AddressWhereInput
}

input AddressUpdateWithWhereUniqueWithoutUserInput {
  data: AddressUpdateWithoutUserInput!
  where: AddressWhereUniqueInput!
}

input AddressUpdateWithoutOrdersInput {
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  line1: StringFieldUpdateOperationsInput
  line2: NullableStringFieldUpdateOperationsInput
  state: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutAddressNestedInput
  zip: StringFieldUpdateOperationsInput
}

input AddressUpdateWithoutUserInput {
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  line1: StringFieldUpdateOperationsInput
  line2: NullableStringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutAddressNestedInput
  state: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  zip: StringFieldUpdateOperationsInput
}

input AddressUpsertWithWhereUniqueWithoutUserInput {
  create: AddressCreateWithoutUserInput!
  update: AddressUpdateWithoutUserInput!
  where: AddressWhereUniqueInput!
}

input AddressUpsertWithoutOrdersInput {
  create: AddressCreateWithoutOrdersInput!
  update: AddressUpdateWithoutOrdersInput!
  where: AddressWhereInput
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  city: StringFilter
  country: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  line1: StringFilter
  line2: StringNullableFilter
  orders: OrderListRelationFilter
  state: StringFilter
  updatedAt: DateTimeFilter
  user: UserNullableRelationFilter
  userId: StringNullableFilter
  zip: StringFilter
}

input AddressWhereUniqueInput {
  AND: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  city: StringFilter
  country: StringFilter
  createdAt: DateTimeFilter
  id: String
  line1: StringFilter
  line2: StringNullableFilter
  orders: OrderListRelationFilter
  state: StringFilter
  updatedAt: DateTimeFilter
  user: UserNullableRelationFilter
  userId: StringNullableFilter
  zip: StringFilter
}

type Auth {
  accessToken: String
  createdAt: DateTime!
  email: String!
  id: ID!
  password: String!
  passwordResetExpires: DateTime
  passwordResetToken: String
  refreshToken: String
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input AuthCreateInput {
  accessToken: String
  createdAt: DateTime
  email: String!
  id: String
  password: String!
  passwordResetExpires: DateTime
  passwordResetToken: String
  refreshToken: String
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutAuthInput!
}

input AuthCreateNestedOneWithoutUserInput {
  connect: AuthWhereUniqueInput
  connectOrCreate: AuthCreateOrConnectWithoutUserInput
  create: AuthCreateWithoutUserInput
}

input AuthCreateOrConnectWithoutUserInput {
  create: AuthCreateWithoutUserInput!
  where: AuthWhereUniqueInput!
}

input AuthCreateWithoutUserInput {
  accessToken: String
  createdAt: DateTime
  email: String!
  id: String
  password: String!
  passwordResetExpires: DateTime
  passwordResetToken: String
  refreshToken: String
  updatedAt: DateTime
}

input AuthNullableRelationFilter {
  is: AuthWhereInput
  isNot: AuthWhereInput
}

input AuthUpdateOneWithoutUserNestedInput {
  connect: AuthWhereUniqueInput
  connectOrCreate: AuthCreateOrConnectWithoutUserInput
  create: AuthCreateWithoutUserInput
  delete: AuthWhereInput
  disconnect: AuthWhereInput
  update: AuthUpdateToOneWithWhereWithoutUserInput
  upsert: AuthUpsertWithoutUserInput
}

input AuthUpdateToOneWithWhereWithoutUserInput {
  data: AuthUpdateWithoutUserInput!
  where: AuthWhereInput
}

input AuthUpdateWithoutUserInput {
  accessToken: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  passwordResetExpires: NullableDateTimeFieldUpdateOperationsInput
  passwordResetToken: NullableStringFieldUpdateOperationsInput
  refreshToken: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthUpsertWithoutUserInput {
  create: AuthCreateWithoutUserInput!
  update: AuthUpdateWithoutUserInput!
  where: AuthWhereInput
}

input AuthWhereInput {
  AND: [AuthWhereInput!]
  NOT: [AuthWhereInput!]
  OR: [AuthWhereInput!]
  accessToken: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  password: StringFilter
  passwordResetExpires: DateTimeNullableFilter
  passwordResetToken: StringNullableFilter
  refreshToken: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AuthWhereUniqueInput {
  AND: [AuthWhereInput!]
  NOT: [AuthWhereInput!]
  OR: [AuthWhereInput!]
  accessToken: StringNullableFilter
  createdAt: DateTimeFilter
  email: String
  id: String
  password: StringFilter
  passwordResetExpires: DateTimeNullableFilter
  passwordResetToken: String
  refreshToken: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Cart {
  _count: CartCount!
  cartItems: [CartItem!]
  coupon: Coupon
  couponId: String
  createdAt: DateTime!
  discount: Discount
  discountId: String
  id: ID!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type CartCount {
  cartItems: Int!
}

input CartCreateInput {
  cartItems: CartItemCreateNestedManyWithoutCartInput
  coupon: CouponCreateNestedOneWithoutCartsInput
  createdAt: DateTime
  discount: DiscountCreateNestedOneWithoutCartsInput
  id: String
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutCartInput!
}

input CartCreateNestedOneWithoutCartItemsInput {
  connect: CartWhereUniqueInput
  connectOrCreate: CartCreateOrConnectWithoutCartItemsInput
  create: CartCreateWithoutCartItemsInput
}

input CartCreateNestedOneWithoutUserInput {
  connect: CartWhereUniqueInput
  connectOrCreate: CartCreateOrConnectWithoutUserInput
  create: CartCreateWithoutUserInput
}

input CartCreateOrConnectWithoutCartItemsInput {
  create: CartCreateWithoutCartItemsInput!
  where: CartWhereUniqueInput!
}

input CartCreateOrConnectWithoutUserInput {
  create: CartCreateWithoutUserInput!
  where: CartWhereUniqueInput!
}

input CartCreateWithoutCartItemsInput {
  coupon: CouponCreateNestedOneWithoutCartsInput
  createdAt: DateTime
  discount: DiscountCreateNestedOneWithoutCartsInput
  id: String
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutCartInput!
}

input CartCreateWithoutUserInput {
  cartItems: CartItemCreateNestedManyWithoutCartInput
  coupon: CouponCreateNestedOneWithoutCartsInput
  createdAt: DateTime
  discount: DiscountCreateNestedOneWithoutCartsInput
  id: String
  updatedAt: DateTime
}

type CartItem {
  cart: Cart!
  cartId: String!
  createdAt: DateTime!
  id: ID!
  order: Order
  orderId: String
  price: Float!
  product: Product!
  productId: String!
  quantity: Int!
  updatedAt: DateTime!
}

input CartItemCreateInput {
  cart: CartCreateNestedOneWithoutCartItemsInput!
  createdAt: DateTime
  id: String
  order: OrderCreateNestedOneWithoutItemsInput
  price: Float
  product: ProductCreateNestedOneWithoutCartItemsInput!
  quantity: Int!
  updatedAt: DateTime
}

input CartItemCreateManyCartInput {
  createdAt: DateTime
  id: String
  orderId: String
  price: Float
  productId: String!
  quantity: Int!
  updatedAt: DateTime
}

input CartItemCreateManyCartInputEnvelope {
  data: [CartItemCreateManyCartInput!]!
  skipDuplicates: Boolean
}

input CartItemCreateManyOrderInput {
  cartId: String!
  createdAt: DateTime
  id: String
  price: Float
  productId: String!
  quantity: Int!
  updatedAt: DateTime
}

input CartItemCreateManyOrderInputEnvelope {
  data: [CartItemCreateManyOrderInput!]!
  skipDuplicates: Boolean
}

input CartItemCreateManyProductInput {
  cartId: String!
  createdAt: DateTime
  id: String
  orderId: String
  price: Float
  quantity: Int!
  updatedAt: DateTime
}

input CartItemCreateManyProductInputEnvelope {
  data: [CartItemCreateManyProductInput!]!
  skipDuplicates: Boolean
}

input CartItemCreateNestedManyWithoutCartInput {
  connect: [CartItemWhereUniqueInput!]
  connectOrCreate: [CartItemCreateOrConnectWithoutCartInput!]
  create: [CartItemCreateWithoutCartInput!]
  createMany: CartItemCreateManyCartInputEnvelope
}

input CartItemCreateNestedManyWithoutOrderInput {
  connect: [CartItemWhereUniqueInput!]
  connectOrCreate: [CartItemCreateOrConnectWithoutOrderInput!]
  create: [CartItemCreateWithoutOrderInput!]
  createMany: CartItemCreateManyOrderInputEnvelope
}

input CartItemCreateNestedManyWithoutProductInput {
  connect: [CartItemWhereUniqueInput!]
  connectOrCreate: [CartItemCreateOrConnectWithoutProductInput!]
  create: [CartItemCreateWithoutProductInput!]
  createMany: CartItemCreateManyProductInputEnvelope
}

input CartItemCreateOrConnectWithoutCartInput {
  create: CartItemCreateWithoutCartInput!
  where: CartItemWhereUniqueInput!
}

input CartItemCreateOrConnectWithoutOrderInput {
  create: CartItemCreateWithoutOrderInput!
  where: CartItemWhereUniqueInput!
}

input CartItemCreateOrConnectWithoutProductInput {
  create: CartItemCreateWithoutProductInput!
  where: CartItemWhereUniqueInput!
}

input CartItemCreateWithoutCartInput {
  createdAt: DateTime
  id: String
  order: OrderCreateNestedOneWithoutItemsInput
  price: Float
  product: ProductCreateNestedOneWithoutCartItemsInput!
  quantity: Int!
  updatedAt: DateTime
}

input CartItemCreateWithoutOrderInput {
  cart: CartCreateNestedOneWithoutCartItemsInput!
  createdAt: DateTime
  id: String
  price: Float
  product: ProductCreateNestedOneWithoutCartItemsInput!
  quantity: Int!
  updatedAt: DateTime
}

input CartItemCreateWithoutProductInput {
  cart: CartCreateNestedOneWithoutCartItemsInput!
  createdAt: DateTime
  id: String
  order: OrderCreateNestedOneWithoutItemsInput
  price: Float
  quantity: Int!
  updatedAt: DateTime
}

input CartItemListRelationFilter {
  every: CartItemWhereInput
  none: CartItemWhereInput
  some: CartItemWhereInput
}

input CartItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input CartItemScalarWhereInput {
  AND: [CartItemScalarWhereInput!]
  NOT: [CartItemScalarWhereInput!]
  OR: [CartItemScalarWhereInput!]
  cartId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  orderId: StringNullableFilter
  price: FloatFilter
  productId: StringFilter
  quantity: IntFilter
  updatedAt: DateTimeFilter
}

input CartItemUpdateInput {
  cart: CartUpdateOneRequiredWithoutCartItemsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  order: OrderUpdateOneWithoutItemsNestedInput
  price: FloatFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutCartItemsNestedInput
  quantity: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CartItemUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CartItemUpdateManyWithWhereWithoutCartInput {
  data: CartItemUpdateManyMutationInput!
  where: CartItemScalarWhereInput!
}

input CartItemUpdateManyWithWhereWithoutOrderInput {
  data: CartItemUpdateManyMutationInput!
  where: CartItemScalarWhereInput!
}

input CartItemUpdateManyWithWhereWithoutProductInput {
  data: CartItemUpdateManyMutationInput!
  where: CartItemScalarWhereInput!
}

input CartItemUpdateManyWithoutCartNestedInput {
  connect: [CartItemWhereUniqueInput!]
  connectOrCreate: [CartItemCreateOrConnectWithoutCartInput!]
  create: [CartItemCreateWithoutCartInput!]
  createMany: CartItemCreateManyCartInputEnvelope
  delete: [CartItemWhereUniqueInput!]
  deleteMany: [CartItemScalarWhereInput!]
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  update: [CartItemUpdateWithWhereUniqueWithoutCartInput!]
  updateMany: [CartItemUpdateManyWithWhereWithoutCartInput!]
  upsert: [CartItemUpsertWithWhereUniqueWithoutCartInput!]
}

input CartItemUpdateManyWithoutOrderNestedInput {
  connect: [CartItemWhereUniqueInput!]
  connectOrCreate: [CartItemCreateOrConnectWithoutOrderInput!]
  create: [CartItemCreateWithoutOrderInput!]
  createMany: CartItemCreateManyOrderInputEnvelope
  delete: [CartItemWhereUniqueInput!]
  deleteMany: [CartItemScalarWhereInput!]
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  update: [CartItemUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [CartItemUpdateManyWithWhereWithoutOrderInput!]
  upsert: [CartItemUpsertWithWhereUniqueWithoutOrderInput!]
}

input CartItemUpdateManyWithoutProductNestedInput {
  connect: [CartItemWhereUniqueInput!]
  connectOrCreate: [CartItemCreateOrConnectWithoutProductInput!]
  create: [CartItemCreateWithoutProductInput!]
  createMany: CartItemCreateManyProductInputEnvelope
  delete: [CartItemWhereUniqueInput!]
  deleteMany: [CartItemScalarWhereInput!]
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  update: [CartItemUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [CartItemUpdateManyWithWhereWithoutProductInput!]
  upsert: [CartItemUpsertWithWhereUniqueWithoutProductInput!]
}

input CartItemUpdateWithWhereUniqueWithoutCartInput {
  data: CartItemUpdateWithoutCartInput!
  where: CartItemWhereUniqueInput!
}

input CartItemUpdateWithWhereUniqueWithoutOrderInput {
  data: CartItemUpdateWithoutOrderInput!
  where: CartItemWhereUniqueInput!
}

input CartItemUpdateWithWhereUniqueWithoutProductInput {
  data: CartItemUpdateWithoutProductInput!
  where: CartItemWhereUniqueInput!
}

input CartItemUpdateWithoutCartInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  order: OrderUpdateOneWithoutItemsNestedInput
  price: FloatFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutCartItemsNestedInput
  quantity: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CartItemUpdateWithoutOrderInput {
  cart: CartUpdateOneRequiredWithoutCartItemsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutCartItemsNestedInput
  quantity: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CartItemUpdateWithoutProductInput {
  cart: CartUpdateOneRequiredWithoutCartItemsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  order: OrderUpdateOneWithoutItemsNestedInput
  price: FloatFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CartItemUpsertWithWhereUniqueWithoutCartInput {
  create: CartItemCreateWithoutCartInput!
  update: CartItemUpdateWithoutCartInput!
  where: CartItemWhereUniqueInput!
}

input CartItemUpsertWithWhereUniqueWithoutOrderInput {
  create: CartItemCreateWithoutOrderInput!
  update: CartItemUpdateWithoutOrderInput!
  where: CartItemWhereUniqueInput!
}

input CartItemUpsertWithWhereUniqueWithoutProductInput {
  create: CartItemCreateWithoutProductInput!
  update: CartItemUpdateWithoutProductInput!
  where: CartItemWhereUniqueInput!
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  cart: CartRelationFilter
  cartId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  order: OrderNullableRelationFilter
  orderId: StringNullableFilter
  price: FloatFilter
  product: ProductRelationFilter
  productId: StringFilter
  quantity: IntFilter
  updatedAt: DateTimeFilter
}

input CartItemWhereUniqueInput {
  AND: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  cart: CartRelationFilter
  cartId: StringFilter
  createdAt: DateTimeFilter
  id: String
  order: OrderNullableRelationFilter
  orderId: StringNullableFilter
  price: FloatFilter
  product: ProductRelationFilter
  productId: StringFilter
  quantity: IntFilter
  updatedAt: DateTimeFilter
}

input CartListRelationFilter {
  every: CartWhereInput
  none: CartWhereInput
  some: CartWhereInput
}

input CartNullableRelationFilter {
  is: CartWhereInput
  isNot: CartWhereInput
}

input CartRelationFilter {
  is: CartWhereInput
  isNot: CartWhereInput
}

input CartUpdateOneRequiredWithoutCartItemsNestedInput {
  connect: CartWhereUniqueInput
  connectOrCreate: CartCreateOrConnectWithoutCartItemsInput
  create: CartCreateWithoutCartItemsInput
  update: CartUpdateToOneWithWhereWithoutCartItemsInput
  upsert: CartUpsertWithoutCartItemsInput
}

input CartUpdateOneWithoutUserNestedInput {
  connect: CartWhereUniqueInput
  connectOrCreate: CartCreateOrConnectWithoutUserInput
  create: CartCreateWithoutUserInput
  delete: CartWhereInput
  disconnect: CartWhereInput
  update: CartUpdateToOneWithWhereWithoutUserInput
  upsert: CartUpsertWithoutUserInput
}

input CartUpdateToOneWithWhereWithoutCartItemsInput {
  data: CartUpdateWithoutCartItemsInput!
  where: CartWhereInput
}

input CartUpdateToOneWithWhereWithoutUserInput {
  data: CartUpdateWithoutUserInput!
  where: CartWhereInput
}

input CartUpdateWithoutCartItemsInput {
  coupon: CouponUpdateOneWithoutCartsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  discount: DiscountUpdateOneWithoutCartsNestedInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCartNestedInput
}

input CartUpdateWithoutUserInput {
  cartItems: CartItemUpdateManyWithoutCartNestedInput
  coupon: CouponUpdateOneWithoutCartsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  discount: DiscountUpdateOneWithoutCartsNestedInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CartUpsertWithoutCartItemsInput {
  create: CartCreateWithoutCartItemsInput!
  update: CartUpdateWithoutCartItemsInput!
  where: CartWhereInput
}

input CartUpsertWithoutUserInput {
  create: CartCreateWithoutUserInput!
  update: CartUpdateWithoutUserInput!
  where: CartWhereInput
}

input CartWhereInput {
  AND: [CartWhereInput!]
  NOT: [CartWhereInput!]
  OR: [CartWhereInput!]
  cartItems: CartItemListRelationFilter
  coupon: CouponNullableRelationFilter
  couponId: StringNullableFilter
  createdAt: DateTimeFilter
  discount: DiscountNullableRelationFilter
  discountId: StringNullableFilter
  id: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input CartWhereUniqueInput {
  AND: [CartWhereInput!]
  NOT: [CartWhereInput!]
  OR: [CartWhereInput!]
  cartItems: CartItemListRelationFilter
  coupon: CouponNullableRelationFilter
  couponId: StringNullableFilter
  createdAt: DateTimeFilter
  discount: DiscountNullableRelationFilter
  discountId: StringNullableFilter
  id: String
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: String
}

type Category {
  _count: CategoryCount!
  id: ID!
  name: String!
  products: [Product!]
}

type CategoryCount {
  products: Int!
}

input CategoryCreateNestedManyWithoutProductsInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutProductsInput!]
  create: [CategoryCreateWithoutProductsInput!]
}

input CategoryCreateOrConnectWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutProductsInput {
  id: String
  name: String!
}

input CategoryListRelationFilter {
  every: CategoryWhereInput
  none: CategoryWhereInput
  some: CategoryWhereInput
}

input CategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input CategoryScalarWhereInput {
  AND: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  id: StringFilter
  name: StringFilter
}

input CategoryUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CategoryUpdateManyWithWhereWithoutProductsInput {
  data: CategoryUpdateManyMutationInput!
  where: CategoryScalarWhereInput!
}

input CategoryUpdateManyWithoutProductsNestedInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutProductsInput!]
  create: [CategoryCreateWithoutProductsInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutProductsInput!]
  updateMany: [CategoryUpdateManyWithWhereWithoutProductsInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutProductsInput!]
}

input CategoryUpdateWithWhereUniqueWithoutProductsInput {
  data: CategoryUpdateWithoutProductsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpdateWithoutProductsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CategoryUpsertWithWhereUniqueWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput!
  update: CategoryUpdateWithoutProductsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  id: StringFilter
  name: StringFilter
  products: ProductListRelationFilter
}

input CategoryWhereUniqueInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  id: String
  name: StringFilter
  products: ProductListRelationFilter
}

type Coupon {
  _count: CouponCount!
  carts: [Cart!]
  code: String!
  createdAt: DateTime!
  expiration: DateTime
  flatAmount: Float
  id: ID!
  oneTimeUse: Boolean!
  percentage: Float
  updatedAt: DateTime!
}

type CouponCount {
  carts: Int!
}

input CouponCreateNestedOneWithoutCartsInput {
  connect: CouponWhereUniqueInput
  connectOrCreate: CouponCreateOrConnectWithoutCartsInput
  create: CouponCreateWithoutCartsInput
}

input CouponCreateOrConnectWithoutCartsInput {
  create: CouponCreateWithoutCartsInput!
  where: CouponWhereUniqueInput!
}

input CouponCreateWithoutCartsInput {
  code: String!
  createdAt: DateTime
  expiration: DateTime
  flatAmount: Float
  id: String
  oneTimeUse: Boolean
  percentage: Float
  updatedAt: DateTime
}

input CouponNullableRelationFilter {
  is: CouponWhereInput
  isNot: CouponWhereInput
}

input CouponUpdateOneWithoutCartsNestedInput {
  connect: CouponWhereUniqueInput
  connectOrCreate: CouponCreateOrConnectWithoutCartsInput
  create: CouponCreateWithoutCartsInput
  delete: CouponWhereInput
  disconnect: CouponWhereInput
  update: CouponUpdateToOneWithWhereWithoutCartsInput
  upsert: CouponUpsertWithoutCartsInput
}

input CouponUpdateToOneWithWhereWithoutCartsInput {
  data: CouponUpdateWithoutCartsInput!
  where: CouponWhereInput
}

input CouponUpdateWithoutCartsInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expiration: NullableDateTimeFieldUpdateOperationsInput
  flatAmount: NullableFloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  oneTimeUse: BoolFieldUpdateOperationsInput
  percentage: NullableFloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CouponUpsertWithoutCartsInput {
  create: CouponCreateWithoutCartsInput!
  update: CouponUpdateWithoutCartsInput!
  where: CouponWhereInput
}

input CouponWhereInput {
  AND: [CouponWhereInput!]
  NOT: [CouponWhereInput!]
  OR: [CouponWhereInput!]
  carts: CartListRelationFilter
  code: StringFilter
  createdAt: DateTimeFilter
  expiration: DateTimeNullableFilter
  flatAmount: FloatNullableFilter
  id: StringFilter
  oneTimeUse: BoolFilter
  percentage: FloatNullableFilter
  updatedAt: DateTimeFilter
}

input CouponWhereUniqueInput {
  AND: [CouponWhereInput!]
  NOT: [CouponWhereInput!]
  OR: [CouponWhereInput!]
  carts: CartListRelationFilter
  code: String
  createdAt: DateTimeFilter
  expiration: DateTimeNullableFilter
  flatAmount: FloatNullableFilter
  id: String
  oneTimeUse: BoolFilter
  percentage: FloatNullableFilter
  updatedAt: DateTimeFilter
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

type Discount {
  _count: DiscountCount!
  carts: [Cart!]
  createdAt: DateTime!
  description: String
  flatAmount: Float
  id: ID!
  percentage: Float
  updatedAt: DateTime!
}

type DiscountCount {
  carts: Int!
}

input DiscountCreateNestedOneWithoutCartsInput {
  connect: DiscountWhereUniqueInput
  connectOrCreate: DiscountCreateOrConnectWithoutCartsInput
  create: DiscountCreateWithoutCartsInput
}

input DiscountCreateOrConnectWithoutCartsInput {
  create: DiscountCreateWithoutCartsInput!
  where: DiscountWhereUniqueInput!
}

input DiscountCreateWithoutCartsInput {
  createdAt: DateTime
  description: String
  flatAmount: Float
  id: String
  percentage: Float
  updatedAt: DateTime
}

input DiscountNullableRelationFilter {
  is: DiscountWhereInput
  isNot: DiscountWhereInput
}

input DiscountUpdateOneWithoutCartsNestedInput {
  connect: DiscountWhereUniqueInput
  connectOrCreate: DiscountCreateOrConnectWithoutCartsInput
  create: DiscountCreateWithoutCartsInput
  delete: DiscountWhereInput
  disconnect: DiscountWhereInput
  update: DiscountUpdateToOneWithWhereWithoutCartsInput
  upsert: DiscountUpsertWithoutCartsInput
}

input DiscountUpdateToOneWithWhereWithoutCartsInput {
  data: DiscountUpdateWithoutCartsInput!
  where: DiscountWhereInput
}

input DiscountUpdateWithoutCartsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  flatAmount: NullableFloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  percentage: NullableFloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DiscountUpsertWithoutCartsInput {
  create: DiscountCreateWithoutCartsInput!
  update: DiscountUpdateWithoutCartsInput!
  where: DiscountWhereInput
}

input DiscountWhereInput {
  AND: [DiscountWhereInput!]
  NOT: [DiscountWhereInput!]
  OR: [DiscountWhereInput!]
  carts: CartListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  flatAmount: FloatNullableFilter
  id: StringFilter
  percentage: FloatNullableFilter
  updatedAt: DateTimeFilter
}

input DiscountWhereUniqueInput {
  AND: [DiscountWhereInput!]
  NOT: [DiscountWhereInput!]
  OR: [DiscountWhereInput!]
  carts: CartListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  flatAmount: FloatNullableFilter
  id: String
  percentage: FloatNullableFilter
  updatedAt: DateTimeFilter
}

input EnumMediaTypeFieldUpdateOperationsInput {
  set: MediaType
}

input EnumMediaTypeFilter {
  equals: MediaType
  in: [MediaType!]
  not: NestedEnumMediaTypeFilter
  notIn: [MediaType!]
}

input EnumOrderStatusFieldUpdateOperationsInput {
  set: OrderStatus
}

input EnumOrderStatusFilter {
  equals: OrderStatus
  in: [OrderStatus!]
  not: NestedEnumOrderStatusFilter
  notIn: [OrderStatus!]
}

input EnumUserRoleFieldUpdateOperationsInput {
  set: UserRole
}

input EnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  not: NestedEnumUserRoleFilter
  notIn: [UserRole!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Media {
  contentType: String!
  createdAt: DateTime!
  filename: String!
  id: ID!
  product: Product
  productId: String
  type: MediaType!
  updatedAt: DateTime!
  url: String!
}

input MediaCreateManyProductInput {
  contentType: String!
  createdAt: DateTime
  filename: String!
  id: String
  type: MediaType!
  updatedAt: DateTime
  url: String!
}

input MediaCreateManyProductInputEnvelope {
  data: [MediaCreateManyProductInput!]!
  skipDuplicates: Boolean
}

input MediaCreateNestedManyWithoutProductInput {
  connect: [MediaWhereUniqueInput!]
  connectOrCreate: [MediaCreateOrConnectWithoutProductInput!]
  create: [MediaCreateWithoutProductInput!]
  createMany: MediaCreateManyProductInputEnvelope
}

input MediaCreateOrConnectWithoutProductInput {
  create: MediaCreateWithoutProductInput!
  where: MediaWhereUniqueInput!
}

input MediaCreateWithoutProductInput {
  contentType: String!
  createdAt: DateTime
  filename: String!
  id: String
  type: MediaType!
  updatedAt: DateTime
  url: String!
}

input MediaListRelationFilter {
  every: MediaWhereInput
  none: MediaWhereInput
  some: MediaWhereInput
}

input MediaOrderByRelationAggregateInput {
  _count: SortOrder
}

input MediaScalarWhereInput {
  AND: [MediaScalarWhereInput!]
  NOT: [MediaScalarWhereInput!]
  OR: [MediaScalarWhereInput!]
  contentType: StringFilter
  createdAt: DateTimeFilter
  filename: StringFilter
  id: StringFilter
  productId: StringNullableFilter
  type: EnumMediaTypeFilter
  updatedAt: DateTimeFilter
  url: StringFilter
}

enum MediaType {
  IMAGE
  OTHER
  VIDEO
}

input MediaUpdateManyMutationInput {
  contentType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  filename: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  type: EnumMediaTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input MediaUpdateManyWithWhereWithoutProductInput {
  data: MediaUpdateManyMutationInput!
  where: MediaScalarWhereInput!
}

input MediaUpdateManyWithoutProductNestedInput {
  connect: [MediaWhereUniqueInput!]
  connectOrCreate: [MediaCreateOrConnectWithoutProductInput!]
  create: [MediaCreateWithoutProductInput!]
  createMany: MediaCreateManyProductInputEnvelope
  delete: [MediaWhereUniqueInput!]
  deleteMany: [MediaScalarWhereInput!]
  disconnect: [MediaWhereUniqueInput!]
  set: [MediaWhereUniqueInput!]
  update: [MediaUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [MediaUpdateManyWithWhereWithoutProductInput!]
  upsert: [MediaUpsertWithWhereUniqueWithoutProductInput!]
}

input MediaUpdateWithWhereUniqueWithoutProductInput {
  data: MediaUpdateWithoutProductInput!
  where: MediaWhereUniqueInput!
}

input MediaUpdateWithoutProductInput {
  contentType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  filename: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  type: EnumMediaTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input MediaUpsertWithWhereUniqueWithoutProductInput {
  create: MediaCreateWithoutProductInput!
  update: MediaUpdateWithoutProductInput!
  where: MediaWhereUniqueInput!
}

input MediaWhereInput {
  AND: [MediaWhereInput!]
  NOT: [MediaWhereInput!]
  OR: [MediaWhereInput!]
  contentType: StringFilter
  createdAt: DateTimeFilter
  filename: StringFilter
  id: StringFilter
  product: ProductNullableRelationFilter
  productId: StringNullableFilter
  type: EnumMediaTypeFilter
  updatedAt: DateTimeFilter
  url: StringFilter
}

input MediaWhereUniqueInput {
  AND: [MediaWhereInput!]
  NOT: [MediaWhereInput!]
  OR: [MediaWhereInput!]
  contentType: StringFilter
  createdAt: DateTimeFilter
  filename: StringFilter
  id: String
  product: ProductNullableRelationFilter
  productId: StringNullableFilter
  type: EnumMediaTypeFilter
  updatedAt: DateTimeFilter
  url: StringFilter
}

type Mutation {
  addCartItem(data: CartItemCreateInput!): CartItem!
  addItemToCart(productId: String!, quantity: Int!, userId: String!): CartItem!
  applyCouponToCart(couponCode: String!, userId: String!): Cart!
  checkout(userId: String!): Order!
  clearCart(userId: String!): Cart!
  completePasswordReset(newPassword: String!, token: String!): PasswordResetCompleteResponseType!
  createCart(data: CartCreateInput!): Cart!
  createOrder(data: OrderCreateInput!): Order!
  createPayment(data: PaymentCreateInput!): Payment!
  createProduct(data: ProductCreateInput!): Product!
  createReview(data: ReviewCreateInput!): Review!
  createUser(data: UserCreateInput!): User!
  deleteMedia(id: String!): Media!
  deleteOrder(id: String!): Order!
  deletePayment(id: String!): Payment!
  deleteProduct(where: ProductWhereUniqueInput!): Product!
  deleteReview(id: String!): Review!
  deleteUser(id: String!): User!
  initiatePasswordReset(email: String!): PasswordResetInitiateResponseType!
  login(email: String!, password: String!): TokenType!
  refreshToken(token: String!, userId: String!): TokenType!
  register(data: AuthCreateInput!): RegisterResponseType!
  removeCartItem(id: String!): CartItem!
  removeItemFromCart(cartItemId: String!): CartItem!
  updateCart(cartItemId: String!, quantity: Int!): CartItem!
  updateCartItem(data: CartItemUpdateInput!, where: CartItemWhereUniqueInput!): CartItem!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order!
  updatePayment(data: PaymentUpdateInput!, where: PaymentWhereUniqueInput!): Payment!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product!
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  uploadMedia: Media!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumMediaTypeFilter {
  equals: MediaType
  in: [MediaType!]
  not: NestedEnumMediaTypeFilter
  notIn: [MediaType!]
}

input NestedEnumOrderStatusFilter {
  equals: OrderStatus
  in: [OrderStatus!]
  not: NestedEnumOrderStatusFilter
  notIn: [OrderStatus!]
}

input NestedEnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  not: NestedEnumUserRoleFilter
  notIn: [UserRole!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableFloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Order {
  _count: OrderCount!
  address: Address
  addressId: String
  createdAt: DateTime!
  id: ID!
  items: [CartItem!]
  payments: [Payment!]
  status: OrderStatus!
  totalAmount: Float!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type OrderCount {
  items: Int!
  payments: Int!
}

input OrderCreateInput {
  address: AddressCreateNestedOneWithoutOrdersInput
  createdAt: DateTime
  id: String
  items: CartItemCreateNestedManyWithoutOrderInput
  payments: PaymentCreateNestedManyWithoutOrderInput
  status: OrderStatus
  totalAmount: Float!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutOrdersInput!
}

input OrderCreateManyAddressInput {
  createdAt: DateTime
  id: String
  status: OrderStatus
  totalAmount: Float!
  updatedAt: DateTime
  userId: String!
}

input OrderCreateManyAddressInputEnvelope {
  data: [OrderCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input OrderCreateManyUserInput {
  addressId: String
  createdAt: DateTime
  id: String
  status: OrderStatus
  totalAmount: Float!
  updatedAt: DateTime
}

input OrderCreateManyUserInputEnvelope {
  data: [OrderCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input OrderCreateNestedManyWithoutAddressInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutAddressInput!]
  create: [OrderCreateWithoutAddressInput!]
  createMany: OrderCreateManyAddressInputEnvelope
}

input OrderCreateNestedManyWithoutUserInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutUserInput!]
  create: [OrderCreateWithoutUserInput!]
  createMany: OrderCreateManyUserInputEnvelope
}

input OrderCreateNestedOneWithoutItemsInput {
  connect: OrderWhereUniqueInput
  connectOrCreate: OrderCreateOrConnectWithoutItemsInput
  create: OrderCreateWithoutItemsInput
}

input OrderCreateNestedOneWithoutPaymentsInput {
  connect: OrderWhereUniqueInput
  connectOrCreate: OrderCreateOrConnectWithoutPaymentsInput
  create: OrderCreateWithoutPaymentsInput
}

input OrderCreateOrConnectWithoutAddressInput {
  create: OrderCreateWithoutAddressInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateOrConnectWithoutItemsInput {
  create: OrderCreateWithoutItemsInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateOrConnectWithoutPaymentsInput {
  create: OrderCreateWithoutPaymentsInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateOrConnectWithoutUserInput {
  create: OrderCreateWithoutUserInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateWithoutAddressInput {
  createdAt: DateTime
  id: String
  items: CartItemCreateNestedManyWithoutOrderInput
  payments: PaymentCreateNestedManyWithoutOrderInput
  status: OrderStatus
  totalAmount: Float!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutOrdersInput!
}

input OrderCreateWithoutItemsInput {
  address: AddressCreateNestedOneWithoutOrdersInput
  createdAt: DateTime
  id: String
  payments: PaymentCreateNestedManyWithoutOrderInput
  status: OrderStatus
  totalAmount: Float!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutOrdersInput!
}

input OrderCreateWithoutPaymentsInput {
  address: AddressCreateNestedOneWithoutOrdersInput
  createdAt: DateTime
  id: String
  items: CartItemCreateNestedManyWithoutOrderInput
  status: OrderStatus
  totalAmount: Float!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutOrdersInput!
}

input OrderCreateWithoutUserInput {
  address: AddressCreateNestedOneWithoutOrdersInput
  createdAt: DateTime
  id: String
  items: CartItemCreateNestedManyWithoutOrderInput
  payments: PaymentCreateNestedManyWithoutOrderInput
  status: OrderStatus
  totalAmount: Float!
  updatedAt: DateTime
}

input OrderListRelationFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

input OrderNullableRelationFilter {
  is: OrderWhereInput
  isNot: OrderWhereInput
}

input OrderRelationFilter {
  is: OrderWhereInput
  isNot: OrderWhereInput
}

input OrderScalarWhereInput {
  AND: [OrderScalarWhereInput!]
  NOT: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  addressId: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  status: EnumOrderStatusFilter
  totalAmount: FloatFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

enum OrderStatus {
  CANCELLED
  CONFIRMED
  DELIVERED
  PENDING
  SHIPPED
}

input OrderUpdateInput {
  address: AddressUpdateOneWithoutOrdersNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  items: CartItemUpdateManyWithoutOrderNestedInput
  payments: PaymentUpdateManyWithoutOrderNestedInput
  status: EnumOrderStatusFieldUpdateOperationsInput
  totalAmount: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutOrdersNestedInput
}

input OrderUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  status: EnumOrderStatusFieldUpdateOperationsInput
  totalAmount: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpdateManyWithWhereWithoutAddressInput {
  data: OrderUpdateManyMutationInput!
  where: OrderScalarWhereInput!
}

input OrderUpdateManyWithWhereWithoutUserInput {
  data: OrderUpdateManyMutationInput!
  where: OrderScalarWhereInput!
}

input OrderUpdateManyWithoutAddressNestedInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutAddressInput!]
  create: [OrderCreateWithoutAddressInput!]
  createMany: OrderCreateManyAddressInputEnvelope
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [OrderUpdateManyWithWhereWithoutAddressInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutAddressInput!]
}

input OrderUpdateManyWithoutUserNestedInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutUserInput!]
  create: [OrderCreateWithoutUserInput!]
  createMany: OrderCreateManyUserInputEnvelope
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [OrderUpdateManyWithWhereWithoutUserInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutUserInput!]
}

input OrderUpdateOneRequiredWithoutPaymentsNestedInput {
  connect: OrderWhereUniqueInput
  connectOrCreate: OrderCreateOrConnectWithoutPaymentsInput
  create: OrderCreateWithoutPaymentsInput
  update: OrderUpdateToOneWithWhereWithoutPaymentsInput
  upsert: OrderUpsertWithoutPaymentsInput
}

input OrderUpdateOneWithoutItemsNestedInput {
  connect: OrderWhereUniqueInput
  connectOrCreate: OrderCreateOrConnectWithoutItemsInput
  create: OrderCreateWithoutItemsInput
  delete: OrderWhereInput
  disconnect: OrderWhereInput
  update: OrderUpdateToOneWithWhereWithoutItemsInput
  upsert: OrderUpsertWithoutItemsInput
}

input OrderUpdateToOneWithWhereWithoutItemsInput {
  data: OrderUpdateWithoutItemsInput!
  where: OrderWhereInput
}

input OrderUpdateToOneWithWhereWithoutPaymentsInput {
  data: OrderUpdateWithoutPaymentsInput!
  where: OrderWhereInput
}

input OrderUpdateWithWhereUniqueWithoutAddressInput {
  data: OrderUpdateWithoutAddressInput!
  where: OrderWhereUniqueInput!
}

input OrderUpdateWithWhereUniqueWithoutUserInput {
  data: OrderUpdateWithoutUserInput!
  where: OrderWhereUniqueInput!
}

input OrderUpdateWithoutAddressInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  items: CartItemUpdateManyWithoutOrderNestedInput
  payments: PaymentUpdateManyWithoutOrderNestedInput
  status: EnumOrderStatusFieldUpdateOperationsInput
  totalAmount: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutOrdersNestedInput
}

input OrderUpdateWithoutItemsInput {
  address: AddressUpdateOneWithoutOrdersNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  payments: PaymentUpdateManyWithoutOrderNestedInput
  status: EnumOrderStatusFieldUpdateOperationsInput
  totalAmount: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutOrdersNestedInput
}

input OrderUpdateWithoutPaymentsInput {
  address: AddressUpdateOneWithoutOrdersNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  items: CartItemUpdateManyWithoutOrderNestedInput
  status: EnumOrderStatusFieldUpdateOperationsInput
  totalAmount: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutOrdersNestedInput
}

input OrderUpdateWithoutUserInput {
  address: AddressUpdateOneWithoutOrdersNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  items: CartItemUpdateManyWithoutOrderNestedInput
  payments: PaymentUpdateManyWithoutOrderNestedInput
  status: EnumOrderStatusFieldUpdateOperationsInput
  totalAmount: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpsertWithWhereUniqueWithoutAddressInput {
  create: OrderCreateWithoutAddressInput!
  update: OrderUpdateWithoutAddressInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithWhereUniqueWithoutUserInput {
  create: OrderCreateWithoutUserInput!
  update: OrderUpdateWithoutUserInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithoutItemsInput {
  create: OrderCreateWithoutItemsInput!
  update: OrderUpdateWithoutItemsInput!
  where: OrderWhereInput
}

input OrderUpsertWithoutPaymentsInput {
  create: OrderCreateWithoutPaymentsInput!
  update: OrderUpdateWithoutPaymentsInput!
  where: OrderWhereInput
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  address: AddressNullableRelationFilter
  addressId: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  items: CartItemListRelationFilter
  payments: PaymentListRelationFilter
  status: EnumOrderStatusFilter
  totalAmount: FloatFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input OrderWhereUniqueInput {
  AND: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  address: AddressNullableRelationFilter
  addressId: StringNullableFilter
  createdAt: DateTimeFilter
  id: String
  items: CartItemListRelationFilter
  payments: PaymentListRelationFilter
  status: EnumOrderStatusFilter
  totalAmount: FloatFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

type PasswordResetCompleteResponseType {
  message: String!
}

type PasswordResetInitiateResponseType {
  passwordResetToken: String!
}

type Payment {
  amount: Float!
  createdAt: DateTime!
  id: ID!
  order: Order!
  orderId: String!
  paymentMethod: String!
  status: String!
  updatedAt: DateTime!
}

input PaymentCreateInput {
  amount: Float!
  createdAt: DateTime
  id: String
  order: OrderCreateNestedOneWithoutPaymentsInput!
  paymentMethod: String!
  status: String!
  updatedAt: DateTime
}

input PaymentCreateManyOrderInput {
  amount: Float!
  createdAt: DateTime
  id: String
  paymentMethod: String!
  status: String!
  updatedAt: DateTime
}

input PaymentCreateManyOrderInputEnvelope {
  data: [PaymentCreateManyOrderInput!]!
  skipDuplicates: Boolean
}

input PaymentCreateNestedManyWithoutOrderInput {
  connect: [PaymentWhereUniqueInput!]
  connectOrCreate: [PaymentCreateOrConnectWithoutOrderInput!]
  create: [PaymentCreateWithoutOrderInput!]
  createMany: PaymentCreateManyOrderInputEnvelope
}

input PaymentCreateOrConnectWithoutOrderInput {
  create: PaymentCreateWithoutOrderInput!
  where: PaymentWhereUniqueInput!
}

input PaymentCreateWithoutOrderInput {
  amount: Float!
  createdAt: DateTime
  id: String
  paymentMethod: String!
  status: String!
  updatedAt: DateTime
}

input PaymentListRelationFilter {
  every: PaymentWhereInput
  none: PaymentWhereInput
  some: PaymentWhereInput
}

input PaymentScalarWhereInput {
  AND: [PaymentScalarWhereInput!]
  NOT: [PaymentScalarWhereInput!]
  OR: [PaymentScalarWhereInput!]
  amount: FloatFilter
  createdAt: DateTimeFilter
  id: StringFilter
  orderId: StringFilter
  paymentMethod: StringFilter
  status: StringFilter
  updatedAt: DateTimeFilter
}

input PaymentUpdateInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  order: OrderUpdateOneRequiredWithoutPaymentsNestedInput
  paymentMethod: StringFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PaymentUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  paymentMethod: StringFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PaymentUpdateManyWithWhereWithoutOrderInput {
  data: PaymentUpdateManyMutationInput!
  where: PaymentScalarWhereInput!
}

input PaymentUpdateManyWithoutOrderNestedInput {
  connect: [PaymentWhereUniqueInput!]
  connectOrCreate: [PaymentCreateOrConnectWithoutOrderInput!]
  create: [PaymentCreateWithoutOrderInput!]
  createMany: PaymentCreateManyOrderInputEnvelope
  delete: [PaymentWhereUniqueInput!]
  deleteMany: [PaymentScalarWhereInput!]
  disconnect: [PaymentWhereUniqueInput!]
  set: [PaymentWhereUniqueInput!]
  update: [PaymentUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [PaymentUpdateManyWithWhereWithoutOrderInput!]
  upsert: [PaymentUpsertWithWhereUniqueWithoutOrderInput!]
}

input PaymentUpdateWithWhereUniqueWithoutOrderInput {
  data: PaymentUpdateWithoutOrderInput!
  where: PaymentWhereUniqueInput!
}

input PaymentUpdateWithoutOrderInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  paymentMethod: StringFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PaymentUpsertWithWhereUniqueWithoutOrderInput {
  create: PaymentCreateWithoutOrderInput!
  update: PaymentUpdateWithoutOrderInput!
  where: PaymentWhereUniqueInput!
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  amount: FloatFilter
  createdAt: DateTimeFilter
  id: StringFilter
  order: OrderRelationFilter
  orderId: StringFilter
  paymentMethod: StringFilter
  status: StringFilter
  updatedAt: DateTimeFilter
}

input PaymentWhereUniqueInput {
  AND: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  amount: FloatFilter
  createdAt: DateTimeFilter
  id: String
  order: OrderRelationFilter
  orderId: StringFilter
  paymentMethod: StringFilter
  status: StringFilter
  updatedAt: DateTimeFilter
}

type Product {
  SKU: String!
  _count: ProductCount!
  cartItems: [CartItem!]
  categories: [Category!]
  createdAt: DateTime!
  description: String!
  id: ID!
  media: [Media!]
  name: String!
  price: Float!
  reviews: [Review!]
  stock: Int!
  updatedAt: DateTime!
}

type ProductCount {
  cartItems: Int!
  categories: Int!
  media: Int!
  reviews: Int!
}

input ProductCreateInput {
  SKU: String!
  cartItems: CartItemCreateNestedManyWithoutProductInput
  categories: CategoryCreateNestedManyWithoutProductsInput
  createdAt: DateTime
  description: String!
  id: String
  media: MediaCreateNestedManyWithoutProductInput
  name: String!
  price: Float!
  reviews: ReviewCreateNestedManyWithoutProductInput
  stock: Int!
  updatedAt: DateTime
}

input ProductCreateNestedOneWithoutCartItemsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutCartItemsInput
  create: ProductCreateWithoutCartItemsInput
}

input ProductCreateNestedOneWithoutReviewsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutReviewsInput
  create: ProductCreateWithoutReviewsInput
}

input ProductCreateOrConnectWithoutCartItemsInput {
  create: ProductCreateWithoutCartItemsInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutReviewsInput {
  create: ProductCreateWithoutReviewsInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateWithoutCartItemsInput {
  SKU: String!
  categories: CategoryCreateNestedManyWithoutProductsInput
  createdAt: DateTime
  description: String!
  id: String
  media: MediaCreateNestedManyWithoutProductInput
  name: String!
  price: Float!
  reviews: ReviewCreateNestedManyWithoutProductInput
  stock: Int!
  updatedAt: DateTime
}

input ProductCreateWithoutReviewsInput {
  SKU: String!
  cartItems: CartItemCreateNestedManyWithoutProductInput
  categories: CategoryCreateNestedManyWithoutProductsInput
  createdAt: DateTime
  description: String!
  id: String
  media: MediaCreateNestedManyWithoutProductInput
  name: String!
  price: Float!
  stock: Int!
  updatedAt: DateTime
}

input ProductListRelationFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

input ProductNullableRelationFilter {
  is: ProductWhereInput
  isNot: ProductWhereInput
}

input ProductOrderByWithRelationInput {
  SKU: SortOrder
  cartItems: CartItemOrderByRelationAggregateInput
  categories: CategoryOrderByRelationAggregateInput
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  media: MediaOrderByRelationAggregateInput
  name: SortOrder
  price: SortOrder
  reviews: ReviewOrderByRelationAggregateInput
  stock: SortOrder
  updatedAt: SortOrder
}

input ProductRelationFilter {
  is: ProductWhereInput
  isNot: ProductWhereInput
}

enum ProductScalarFieldEnum {
  SKU
  createdAt
  description
  id
  name
  price
  stock
  updatedAt
}

input ProductUpdateInput {
  SKU: StringFieldUpdateOperationsInput
  cartItems: CartItemUpdateManyWithoutProductNestedInput
  categories: CategoryUpdateManyWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  media: MediaUpdateManyWithoutProductNestedInput
  name: StringFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  reviews: ReviewUpdateManyWithoutProductNestedInput
  stock: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpdateOneRequiredWithoutCartItemsNestedInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutCartItemsInput
  create: ProductCreateWithoutCartItemsInput
  update: ProductUpdateToOneWithWhereWithoutCartItemsInput
  upsert: ProductUpsertWithoutCartItemsInput
}

input ProductUpdateOneRequiredWithoutReviewsNestedInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutReviewsInput
  create: ProductCreateWithoutReviewsInput
  update: ProductUpdateToOneWithWhereWithoutReviewsInput
  upsert: ProductUpsertWithoutReviewsInput
}

input ProductUpdateToOneWithWhereWithoutCartItemsInput {
  data: ProductUpdateWithoutCartItemsInput!
  where: ProductWhereInput
}

input ProductUpdateToOneWithWhereWithoutReviewsInput {
  data: ProductUpdateWithoutReviewsInput!
  where: ProductWhereInput
}

input ProductUpdateWithoutCartItemsInput {
  SKU: StringFieldUpdateOperationsInput
  categories: CategoryUpdateManyWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  media: MediaUpdateManyWithoutProductNestedInput
  name: StringFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  reviews: ReviewUpdateManyWithoutProductNestedInput
  stock: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpdateWithoutReviewsInput {
  SKU: StringFieldUpdateOperationsInput
  cartItems: CartItemUpdateManyWithoutProductNestedInput
  categories: CategoryUpdateManyWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  media: MediaUpdateManyWithoutProductNestedInput
  name: StringFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  stock: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpsertWithoutCartItemsInput {
  create: ProductCreateWithoutCartItemsInput!
  update: ProductUpdateWithoutCartItemsInput!
  where: ProductWhereInput
}

input ProductUpsertWithoutReviewsInput {
  create: ProductCreateWithoutReviewsInput!
  update: ProductUpdateWithoutReviewsInput!
  where: ProductWhereInput
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  SKU: StringFilter
  cartItems: CartItemListRelationFilter
  categories: CategoryListRelationFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  media: MediaListRelationFilter
  name: StringFilter
  price: FloatFilter
  reviews: ReviewListRelationFilter
  stock: IntFilter
  updatedAt: DateTimeFilter
}

input ProductWhereUniqueInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  SKU: String
  cartItems: CartItemListRelationFilter
  categories: CategoryListRelationFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: String
  media: MediaListRelationFilter
  name: StringFilter
  price: FloatFilter
  reviews: ReviewListRelationFilter
  stock: IntFilter
  updatedAt: DateTimeFilter
}

type Query {
  cartItem(id: String!): CartItem
  getCartByUserId(userId: String!): Cart!
  getMediaById(id: String!): String
  media: [Media!]!
  order(id: String!): Order
  orders(skip: Int!, take: Int!): [Order!]!
  payment(id: String!): Payment
  payments: [Payment!]!
  product(id: String!): Product
  products(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  review(id: String!): Review
  reviews(skip: Int!, take: Int!): [Review!]!
  user(id: String!): User
  users(skip: Int!, take: Int!): [User!]!
}

enum QueryMode {
  default
  insensitive
}

type RegisterResponseType {
  accessToken: String!
  refreshToken: String!
  user: Auth!
}

type Review {
  content: String!
  createdAt: DateTime!
  id: ID!
  product: Product!
  productId: String!
  rating: Int!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input ReviewCreateInput {
  content: String!
  createdAt: DateTime
  id: String
  product: ProductCreateNestedOneWithoutReviewsInput!
  rating: Int!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutReviewsInput!
}

input ReviewCreateManyProductInput {
  content: String!
  createdAt: DateTime
  id: String
  rating: Int!
  updatedAt: DateTime
  userId: String!
}

input ReviewCreateManyProductInputEnvelope {
  data: [ReviewCreateManyProductInput!]!
  skipDuplicates: Boolean
}

input ReviewCreateManyUserInput {
  content: String!
  createdAt: DateTime
  id: String
  productId: String!
  rating: Int!
  updatedAt: DateTime
}

input ReviewCreateManyUserInputEnvelope {
  data: [ReviewCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ReviewCreateNestedManyWithoutProductInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutProductInput!]
  create: [ReviewCreateWithoutProductInput!]
  createMany: ReviewCreateManyProductInputEnvelope
}

input ReviewCreateNestedManyWithoutUserInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutUserInput!]
  create: [ReviewCreateWithoutUserInput!]
  createMany: ReviewCreateManyUserInputEnvelope
}

input ReviewCreateOrConnectWithoutProductInput {
  create: ReviewCreateWithoutProductInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateOrConnectWithoutUserInput {
  create: ReviewCreateWithoutUserInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateWithoutProductInput {
  content: String!
  createdAt: DateTime
  id: String
  rating: Int!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutReviewsInput!
}

input ReviewCreateWithoutUserInput {
  content: String!
  createdAt: DateTime
  id: String
  product: ProductCreateNestedOneWithoutReviewsInput!
  rating: Int!
  updatedAt: DateTime
}

input ReviewListRelationFilter {
  every: ReviewWhereInput
  none: ReviewWhereInput
  some: ReviewWhereInput
}

input ReviewOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReviewScalarWhereInput {
  AND: [ReviewScalarWhereInput!]
  NOT: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  productId: StringFilter
  rating: IntFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input ReviewUpdateInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutReviewsNestedInput
  rating: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReviewsNestedInput
}

input ReviewUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReviewUpdateManyWithWhereWithoutProductInput {
  data: ReviewUpdateManyMutationInput!
  where: ReviewScalarWhereInput!
}

input ReviewUpdateManyWithWhereWithoutUserInput {
  data: ReviewUpdateManyMutationInput!
  where: ReviewScalarWhereInput!
}

input ReviewUpdateManyWithoutProductNestedInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutProductInput!]
  create: [ReviewCreateWithoutProductInput!]
  createMany: ReviewCreateManyProductInputEnvelope
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ReviewUpdateManyWithWhereWithoutProductInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutProductInput!]
}

input ReviewUpdateManyWithoutUserNestedInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutUserInput!]
  create: [ReviewCreateWithoutUserInput!]
  createMany: ReviewCreateManyUserInputEnvelope
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReviewUpdateManyWithWhereWithoutUserInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutUserInput!]
}

input ReviewUpdateWithWhereUniqueWithoutProductInput {
  data: ReviewUpdateWithoutProductInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithWhereUniqueWithoutUserInput {
  data: ReviewUpdateWithoutUserInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithoutProductInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReviewsNestedInput
}

input ReviewUpdateWithoutUserInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutReviewsNestedInput
  rating: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReviewUpsertWithWhereUniqueWithoutProductInput {
  create: ReviewCreateWithoutProductInput!
  update: ReviewUpdateWithoutProductInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutUserInput {
  create: ReviewCreateWithoutUserInput!
  update: ReviewUpdateWithoutUserInput!
  where: ReviewWhereUniqueInput!
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  product: ProductRelationFilter
  productId: StringFilter
  rating: IntFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ReviewWhereUniqueInput {
  AND: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: String
  product: ProductRelationFilter
  productId: StringFilter
  rating: IntFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type TokenType {
  accessToken: String!
  refreshToken: String!
}

type User {
  _count: UserCount!
  address: [Address!]
  auth: Auth
  cart: Cart
  createdAt: DateTime!
  firstName: String
  id: ID!
  lastName: String
  orders: [Order!]
  reviews: [Review!]
  role: UserRole!
  updatedAt: DateTime!
}

type UserCount {
  address: Int!
  orders: Int!
  reviews: Int!
}

input UserCreateInput {
  address: AddressCreateNestedManyWithoutUserInput
  auth: AuthCreateNestedOneWithoutUserInput
  cart: CartCreateNestedOneWithoutUserInput
  createdAt: DateTime
  firstName: String
  id: String
  lastName: String
  orders: OrderCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: UserRole
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutAddressInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAddressInput
  create: UserCreateWithoutAddressInput
}

input UserCreateNestedOneWithoutAuthInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAuthInput
  create: UserCreateWithoutAuthInput
}

input UserCreateNestedOneWithoutCartInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCartInput
  create: UserCreateWithoutCartInput
}

input UserCreateNestedOneWithoutOrdersInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutOrdersInput
  create: UserCreateWithoutOrdersInput
}

input UserCreateNestedOneWithoutReviewsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReviewsInput
  create: UserCreateWithoutReviewsInput
}

input UserCreateOrConnectWithoutAddressInput {
  create: UserCreateWithoutAddressInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutAuthInput {
  create: UserCreateWithoutAuthInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCartInput {
  create: UserCreateWithoutCartInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAddressInput {
  auth: AuthCreateNestedOneWithoutUserInput
  cart: CartCreateNestedOneWithoutUserInput
  createdAt: DateTime
  firstName: String
  id: String
  lastName: String
  orders: OrderCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: UserRole
  updatedAt: DateTime
}

input UserCreateWithoutAuthInput {
  address: AddressCreateNestedManyWithoutUserInput
  cart: CartCreateNestedOneWithoutUserInput
  createdAt: DateTime
  firstName: String
  id: String
  lastName: String
  orders: OrderCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: UserRole
  updatedAt: DateTime
}

input UserCreateWithoutCartInput {
  address: AddressCreateNestedManyWithoutUserInput
  auth: AuthCreateNestedOneWithoutUserInput
  createdAt: DateTime
  firstName: String
  id: String
  lastName: String
  orders: OrderCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: UserRole
  updatedAt: DateTime
}

input UserCreateWithoutOrdersInput {
  address: AddressCreateNestedManyWithoutUserInput
  auth: AuthCreateNestedOneWithoutUserInput
  cart: CartCreateNestedOneWithoutUserInput
  createdAt: DateTime
  firstName: String
  id: String
  lastName: String
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: UserRole
  updatedAt: DateTime
}

input UserCreateWithoutReviewsInput {
  address: AddressCreateNestedManyWithoutUserInput
  auth: AuthCreateNestedOneWithoutUserInput
  cart: CartCreateNestedOneWithoutUserInput
  createdAt: DateTime
  firstName: String
  id: String
  lastName: String
  orders: OrderCreateNestedManyWithoutUserInput
  role: UserRole
  updatedAt: DateTime
}

input UserNullableRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

input UserUpdateInput {
  address: AddressUpdateManyWithoutUserNestedInput
  auth: AuthUpdateOneWithoutUserNestedInput
  cart: CartUpdateOneWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: EnumUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutCartNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCartInput
  create: UserCreateWithoutCartInput
  update: UserUpdateToOneWithWhereWithoutCartInput
  upsert: UserUpsertWithoutCartInput
}

input UserUpdateOneRequiredWithoutOrdersNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutOrdersInput
  create: UserCreateWithoutOrdersInput
  update: UserUpdateToOneWithWhereWithoutOrdersInput
  upsert: UserUpsertWithoutOrdersInput
}

input UserUpdateOneRequiredWithoutReviewsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReviewsInput
  create: UserCreateWithoutReviewsInput
  update: UserUpdateToOneWithWhereWithoutReviewsInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateOneWithoutAddressNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAddressInput
  create: UserCreateWithoutAddressInput
  delete: UserWhereInput
  disconnect: UserWhereInput
  update: UserUpdateToOneWithWhereWithoutAddressInput
  upsert: UserUpsertWithoutAddressInput
}

input UserUpdateToOneWithWhereWithoutAddressInput {
  data: UserUpdateWithoutAddressInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutCartInput {
  data: UserUpdateWithoutCartInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutOrdersInput {
  data: UserUpdateWithoutOrdersInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutReviewsInput {
  data: UserUpdateWithoutReviewsInput!
  where: UserWhereInput
}

input UserUpdateWithoutAddressInput {
  auth: AuthUpdateOneWithoutUserNestedInput
  cart: CartUpdateOneWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: EnumUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutCartInput {
  address: AddressUpdateManyWithoutUserNestedInput
  auth: AuthUpdateOneWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: EnumUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutOrdersInput {
  address: AddressUpdateManyWithoutUserNestedInput
  auth: AuthUpdateOneWithoutUserNestedInput
  cart: CartUpdateOneWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: EnumUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutReviewsInput {
  address: AddressUpdateManyWithoutUserNestedInput
  auth: AuthUpdateOneWithoutUserNestedInput
  cart: CartUpdateOneWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutUserNestedInput
  role: EnumUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutAddressInput {
  create: UserCreateWithoutAddressInput!
  update: UserUpdateWithoutAddressInput!
  where: UserWhereInput
}

input UserUpsertWithoutCartInput {
  create: UserCreateWithoutCartInput!
  update: UserUpdateWithoutCartInput!
  where: UserWhereInput
}

input UserUpsertWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput!
  update: UserUpdateWithoutOrdersInput!
  where: UserWhereInput
}

input UserUpsertWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput!
  update: UserUpdateWithoutReviewsInput!
  where: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  address: AddressListRelationFilter
  auth: AuthNullableRelationFilter
  cart: CartNullableRelationFilter
  createdAt: DateTimeFilter
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  orders: OrderListRelationFilter
  reviews: ReviewListRelationFilter
  role: EnumUserRoleFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  address: AddressListRelationFilter
  auth: AuthNullableRelationFilter
  cart: CartNullableRelationFilter
  createdAt: DateTimeFilter
  firstName: StringNullableFilter
  id: String
  lastName: StringNullableFilter
  orders: OrderListRelationFilter
  reviews: ReviewListRelationFilter
  role: EnumUserRoleFilter
  updatedAt: DateTimeFilter
}